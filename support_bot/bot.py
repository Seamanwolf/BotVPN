#!/usr/bin/env python3
"""
SeaVPN Support Bot - –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π SeaVPN
"""

import asyncio
import logging
from datetime import datetime, timedelta
import os
import json
import sys
from aiogram.fsm.context import FSMContext

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from database import SessionLocal, User, Subscription, Admin, Ticket, TicketMessage
from config import ADMIN_IDS as CONFIG_ADMIN_IDS

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
BOT_TOKEN = os.getenv("SUPPORT_BOT_TOKEN", "8261852911:AAHFkocNITb8VDYZnjyQ_Wcy7A25oLANwtY")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_admin_ids():
    try:
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            admins = db.query(Admin).filter(Admin.is_active == True).all()
            admin_ids = [admin.telegram_id for admin in admins]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            admin_ids.extend(CONFIG_ADMIN_IDS)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            admin_ids = list(set(admin_ids))
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(admin_ids)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_ids}")
            return admin_ids
        finally:
            db.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return CONFIG_ADMIN_IDS

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = get_admin_ids()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class SupportStates(StatesGroup):
    waiting_for_issue = State()
    waiting_for_reply = State()
    waiting_for_suggestion = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–∏–∫–µ—Ç–∞
def generate_ticket_number():
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ + 1
        count = db.query(Ticket).count() + 1
        return f"{count:04d}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–∏–∫–µ—Ç–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä
        import random
        return f"{random.randint(1000, 9999):04d}"
    finally:
        db.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(is_admin=False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç"), KeyboardButton(text="üîç –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã")],
        [KeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")]
    ]
    
    if is_admin:
        keyboard.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞"""
    keyboard = [
        [KeyboardButton(text="üìã –í—Å–µ —Ç–∏–∫–µ—Ç—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_ticket_keyboard(ticket_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–æ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_ticket:{ticket_id}")],
        [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_ticket:{ticket_id}")]
    ])
    return keyboard

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    current_time = datetime.now()
    if not hasattr(is_admin, "last_update") or (current_time - is_admin.last_update).total_seconds() > 300:
        global ADMIN_IDS
        ADMIN_IDS = get_admin_ids()
        is_admin.last_update = current_time
    
    return user_id in ADMIN_IDS

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
is_admin.last_update = datetime.now()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    await message.answer(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SeaVPN.\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ, –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard(is_admin=is_admin(user_id))
    )

@dp.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìå **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /new_ticket - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç\n"
        "‚Ä¢ /my_tickets - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ç–∏–∫–µ—Ç—ã\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç' –∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n"
        "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
async def create_ticket_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –≤–∞–º –ø–æ–º–æ—á—å."
    )
    await state.set_state(SupportStates.waiting_for_issue)

@dp.message(F.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def suggestion_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    await message.answer(
        "üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –∏–¥–µ—è–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à VPN –µ—â–µ –ª—É—á—à–µ!"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–∏–∫–µ—Ç–∞ –∫–∞–∫ "suggestion"
    await state.update_data(ticket_type="suggestion")
    await state.set_state(SupportStates.waiting_for_suggestion)

@dp.message(SupportStates.waiting_for_issue)
async def process_issue(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    telegram_id = message.from_user.id
    user_name = message.from_user.full_name
    issue_text = message.text
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —Ç–∏–ø–∞ "support"
    await create_ticket(message, "support", issue_text)
    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@dp.message(SupportStates.waiting_for_suggestion)
async def process_suggestion(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    telegram_id = message.from_user.id
    user_name = message.from_user.full_name
    suggestion_text = message.text
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —Ç–∏–ø–∞ "suggestion"
    await create_ticket(message, "suggestion", suggestion_text)
    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

async def create_ticket(message: Message, ticket_type: str, text: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    telegram_id = message.from_user.id
    user_name = message.from_user.full_name
    
    db = SessionLocal()
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ç–∏–∫–µ—Ç–∞
        if ticket_type not in ["support", "suggestion"]:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–∏–∫–µ—Ç–∞: {ticket_type}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–∏–∫–µ—Ç–∞.",
                reply_markup=get_main_keyboard(is_admin=is_admin(telegram_id))
            )
            # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            try:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                from string import ascii_uppercase, digits
                import secrets
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
                alphabet = ascii_uppercase + digits
                referral_code = ''.join(secrets.choice(alphabet) for _ in range(6))
                
                user = User(
                    telegram_id=telegram_id,
                    full_name=user_name,
                    referral_code=referral_code
                )
                db.add(user)
                db.commit()
                db.refresh(user)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_keyboard(is_admin=is_admin(telegram_id))
                )
                # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞
            ticket_number = generate_ticket_number()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É —Ç–∏–∫–µ—Ç–∞
            subject_prefix = "[–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ] " if ticket_type == "suggestion" else ""
            subject = subject_prefix + (text[:50] + "..." if len(text) > 50 else text)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
            ticket = Ticket(
                ticket_number=ticket_number,
                user_id=user.id,
                status="open",
                ticket_type=ticket_type,
                subject=subject
            )
            db.add(ticket)
            db.commit()
            db.refresh(ticket)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤ –ë–î: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard(is_admin=is_admin(telegram_id))
            )
            # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ticket_message = TicketMessage(
                ticket_id=ticket.id,
                sender_id=user.id,
                sender_type="user",
                message=text
            )
            db.add(ticket_message)
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
            # –¢–∏–∫–µ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–∏–∫–µ—Ç–∞
        if ticket_type == "suggestion":
            await message.answer(
                f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (—Ç–∏–∫–µ—Ç #{ticket_number}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
                f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥ –≤ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n"
                f"–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∏–¥–µ—é –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
                reply_markup=get_main_keyboard(is_admin=is_admin(telegram_id))
            )
        else:
            await message.answer(
                f"‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã'.",
                reply_markup=get_main_keyboard(is_admin=is_admin(telegram_id))
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_notification_sent = False
        for admin_id in ADMIN_IDS:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ —Å –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                notification_prefix = "üÜï *–ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï" if ticket_type == "suggestion" else "üÜï *–ù–û–í–´–ô –¢–ò–ö–ï–¢"
                await bot.send_message(
                    admin_id,
                    f"{notification_prefix} #{ticket_number}*\n\n"
                    f"üë§ *–û—Ç:* {user_name} (ID: {telegram_id})\n"
                    f"üïí *–í—Ä–µ–º—è:* {ticket.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{text}",
                    parse_mode="Markdown",
                    reply_markup=get_ticket_keyboard(ticket_number)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await bot.send_voice(
                    admin_id,
                    voice="https://raw.githubusercontent.com/SeaVPN/notification-sounds/main/new_ticket.ogg",
                    caption="üîä –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
                admin_notification_sent = True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∞–¥–º–∏–Ω–∞–º–∏
        
        if not admin_notification_sent:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_admin=is_admin(telegram_id))
        )
    finally:
        db.close()
    
    # –ú—ã —É–±—Ä–∞–ª–∏ –≤—ã–∑–æ–≤ state.clear(), —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞—é—â–∏–º –∫–æ–¥–æ–º

@dp.message(F.text == "üîç –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã")
async def my_tickets_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
    telegram_id = message.from_user.id
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        
        if not user:
            await message.answer(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç'."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tickets = db.query(Ticket).filter(Ticket.user_id == user.id).order_by(Ticket.created_at.desc()).all()
        
        if not tickets:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n"
                "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç'."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
        for ticket in tickets:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_count = db.query(TicketMessage).filter(TicketMessage.ticket_id == ticket.id).count()
            
            status_emoji = "üü¢" if ticket.status == "open" else "üî¥"
            response = f"{status_emoji} **–¢–∏–∫–µ—Ç #{ticket.ticket_number}**\n"
            response += f"–°—Ç–∞—Ç—É—Å: {'–û—Ç–∫—Ä—ã—Ç' if ticket.status == 'open' else '–ó–∞–∫—Ä—ã—Ç'}\n"
            response += f"–¢–µ–º–∞: {ticket.subject}\n"
            response += f"–°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            response += f"–°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_ticket:{ticket.ticket_number}")]
            ])
            
            await message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        db.close()

@dp.callback_query(lambda c: c.data.startswith("view_ticket:"))
async def view_ticket_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞"""
    ticket_number = callback.data.split(":")[1]
    telegram_id = callback.from_user.id
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
        ticket = db.query(Ticket).filter(Ticket.ticket_number == ticket_number).first()
        
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
        if ticket.user_id != user.id and not is_admin(telegram_id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        messages = db.query(TicketMessage).filter(TicketMessage.ticket_id == ticket.id).order_by(TicketMessage.created_at).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        response = f"üìù **–¢–∏–∫–µ—Ç #{ticket_number}**\n"
        response += f"–°—Ç–∞—Ç—É—Å: {'üü¢ –û—Ç–∫—Ä—ã—Ç' if ticket.status == 'open' else 'üî¥ –ó–∞–∫—Ä—ã—Ç'}\n"
        response += f"–°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
        for msg in messages:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender_type = msg.sender_type
            if sender_type == "user" and msg.sender_id == user.id:
                sender = "üë§ –í—ã"
            elif sender_type == "admin":
                sender = "üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
            elif sender_type == "system":
                sender = "ü§ñ –°–∏—Å—Ç–µ–º–∞"
            else:
                sender = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            response += f"{sender} ({msg.created_at.strftime('%Y-%m-%d %H:%M:%S')}):\n{msg.message}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = None
        if ticket.status == "open":
            if is_admin(telegram_id):
                keyboard = get_ticket_keyboard(ticket_number)
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_ticket:{ticket_number}")]
                ])
        
        await callback.message.edit_text(response, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–∏–∫–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–∞")
    finally:
        db.close()

@dp.callback_query(lambda c: c.data.startswith("reply_ticket:"))
async def reply_ticket_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç"""
    ticket_number = callback.data.split(":")[1]
    telegram_id = callback.from_user.id
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
        ticket = db.query(Ticket).filter(Ticket.ticket_number == ticket_number).first()
        
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
        if ticket.user_id != user.id and not is_admin(telegram_id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É")
            return
        
        if ticket.status != "open":
            await callback.answer("–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(ticket_id=ticket.id, ticket_number=ticket_number, 
                               is_admin=is_admin(telegram_id))
        await state.set_state(SupportStates.waiting_for_reply)
        
        await callback.message.answer(
            f"üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_number}:"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
    finally:
        db.close()

@dp.message(SupportStates.waiting_for_reply)
async def process_reply(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç"""
    data = await state.get_data()
    ticket_id = data.get("ticket_id")
    ticket_number = data.get("ticket_number")
    is_admin_reply = data.get("is_admin", False)
    
    if not ticket_id or not ticket_number:
        await message.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω")
        await state.clear()
        return
    
    telegram_id = message.from_user.id
    reply_text = message.text
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –ø–æ ID
        ticket = db.query(Ticket).filter(Ticket.id == ticket_id).first()
        
        if not ticket:
            await message.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
        if ticket.user_id != user.id and not is_admin(telegram_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É")
            await state.clear()
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_type = "admin" if is_admin_reply else "user"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ticket_message = TicketMessage(
            ticket_id=ticket.id,
            sender_id=user.id,
            sender_type=sender_type,
            message=reply_text
        )
        db.add(ticket_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        ticket.updated_at = datetime.now()
        
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=get_main_keyboard(is_admin=is_admin(telegram_id))
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        try:
            if is_admin_reply:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –∞–¥–º–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                ticket_owner = db.query(User).filter(User.id == ticket.user_id).first()
                if ticket_owner:
                    recipient_id = ticket_owner.telegram_id
                    sender_name = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    await bot.send_message(
                        recipient_id,
                        f"üîî *–ù–û–í–´–ô –û–¢–í–ï–¢ –ù–ê –í–ê–® –¢–ò–ö–ï–¢ #{ticket_number}*\n\n"
                        f"üìù *–û—Ç:* {sender_name}\n"
                        f"üïí *–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{reply_text}",
                        parse_mode="Markdown",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"view_ticket:{ticket_number}")]
                        ])
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await bot.send_voice(
                        recipient_id,
                        voice="https://raw.githubusercontent.com/SeaVPN/notification-sounds/main/notification.ogg",
                        caption="üîä –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ"
                    )
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                for admin_id in ADMIN_IDS:
                    sender_name = user.full_name
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    await bot.send_message(
                        admin_id,
                        f"üîî *–ù–û–í–´–ô –û–¢–í–ï–¢ –ù–ê –¢–ò–ö–ï–¢ #{ticket_number}*\n\n"
                        f"üë§ *–û—Ç:* {sender_name} (ID: {telegram_id})\n"
                        f"üïí *–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{reply_text}",
                        parse_mode="Markdown",
                        reply_markup=get_ticket_keyboard(ticket_number)
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await bot.send_voice(
                        admin_id,
                        voice="https://raw.githubusercontent.com/SeaVPN/notification-sounds/main/admin_notification.ogg",
                        caption="üîä –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
    finally:
        db.close()
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith("close_ticket:"))
async def close_ticket_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞"""
    ticket_number = callback.data.split(":")[1]
    telegram_id = callback.from_user.id
    
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã
    if not is_admin(telegram_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞")
        return
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
        ticket = db.query(Ticket).filter(Ticket.ticket_number == ticket_number).first()
        
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket.status = "closed"
        ticket.closed_at = datetime.now()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
        ticket_message = TicketMessage(
            ticket_id=ticket.id,
            sender_id=None,  # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sender_type="system",
            message="–¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        db.add(ticket_message)
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"üî¥ –¢–∏–∫–µ—Ç #{ticket_number} –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            ticket_owner = db.query(User).filter(User.id == ticket.user_id).first()
            if ticket_owner:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ —Å –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                await bot.send_message(
                    ticket_owner.telegram_id,
                    f"üî¥ *–í–ê–® –¢–ò–ö–ï–¢ #{ticket_number} –ë–´–õ –ó–ê–ö–†–´–¢*\n\n"
                    f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.",
                    parse_mode="Markdown"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await bot.send_voice(
                    ticket_owner.telegram_id,
                    voice="https://raw.githubusercontent.com/SeaVPN/notification-sounds/main/ticket_closed.ogg",
                    caption="üîä –¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        await callback.answer("–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞")
    finally:
        db.close()

@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer(
        "‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@dp.message(F.text == "üìã –í—Å–µ —Ç–∏–∫–µ—Ç—ã")
async def all_tickets_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    telegram_id = message.from_user.id
    
    if not is_admin(telegram_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ç—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ, –ø–æ—Ç–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        tickets = db.query(Ticket).order_by(
            Ticket.status,  # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ (open < closed)
            Ticket.updated_at.desc()  # –ó–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        ).limit(10).all()
        
        if not tickets:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
        for ticket in tickets:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.id == ticket.user_id).first()
            user_name = user.full_name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            user_telegram_id = user.telegram_id if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_count = db.query(TicketMessage).filter(TicketMessage.ticket_id == ticket.id).count()
            
            status_emoji = "üü¢" if ticket.status == "open" else "üî¥"
            response = f"{status_emoji} **–¢–∏–∫–µ—Ç #{ticket.ticket_number}**\n"
            response += f"–û—Ç: {user_name} (ID: {user_telegram_id})\n"
            response += f"–°—Ç–∞—Ç—É—Å: {'–û—Ç–∫—Ä—ã—Ç' if ticket.status == 'open' else '–ó–∞–∫—Ä—ã—Ç'}\n"
            response += f"–¢–µ–º–∞: {ticket.subject}\n"
            response += f"–°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            response += f"–û–±–Ω–æ–≤–ª–µ–Ω: {ticket.updated_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            response += f"–°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_ticket:{ticket.ticket_number}")]
            ])
            
            await message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤")
    finally:
        db.close()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    telegram_id = message.from_user.id
    
    if not is_admin(telegram_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    db = SessionLocal()
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_tickets = db.query(Ticket).count()
        open_tickets = db.query(Ticket).filter(Ticket.status == "open").count()
        closed_tickets = db.query(Ticket).filter(Ticket.status == "closed").count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users_with_tickets = db.query(Ticket.user_id).distinct().count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        total_messages = db.query(TicketMessage).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        today = datetime.now().date()
        tickets_today = db.query(Ticket).filter(
            Ticket.created_at >= datetime.combine(today, datetime.min.time())
        ).count()
        
        messages_today = db.query(TicketMessage).filter(
            TicketMessage.created_at >= datetime.combine(today, datetime.min.time())
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞)
        # –≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        admin_messages = db.query(TicketMessage).filter(TicketMessage.sender_type == "admin").count()
        user_messages = db.query(TicketMessage).filter(TicketMessage.sender_type == "user").count()
        
        await message.answer(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤**\n\n"
            f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
            f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tickets}\n"
            f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {closed_tickets}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∏–∫–µ—Ç–∞–º–∏: {users_with_tickets}\n"
            f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            f"‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_messages}\n"
            f"‚Ä¢ –û—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_messages}\n\n"
            f"–°–µ–≥–æ–¥–Ω—è:\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {tickets_today}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_today}\n"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        db.close()

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    user_id = message.from_user.id
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_admin=is_admin(user_id))
    )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SeaVPN...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
