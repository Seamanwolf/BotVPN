#!/usr/bin/env python3
"""
SeaVPN Support Bot - –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π SeaVPN
"""

import asyncio
import logging
from datetime import datetime, timedelta
import os
import json
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
BOT_TOKEN = os.getenv("SUPPORT_BOT_TOKEN", "8261852911:AAHFkocNITb8VDYZnjyQ_Wcy7A25oLANwtY")

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [5379158583]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class SupportStates(StatesGroup):
    waiting_for_issue = State()
    waiting_for_reply = State()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤
tickets = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(is_admin=False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç"), KeyboardButton(text="üîç –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã")]
    ]
    
    if is_admin:
        keyboard.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞"""
    keyboard = [
        [KeyboardButton(text="üìã –í—Å–µ —Ç–∏–∫–µ—Ç—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_ticket_keyboard(ticket_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–æ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_ticket:{ticket_id}")],
        [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_ticket:{ticket_id}")]
    ])
    return keyboard

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    await message.answer(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SeaVPN.\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ, –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard(is_admin=is_admin(user_id))
    )

@dp.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìå **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /new_ticket - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç\n"
        "‚Ä¢ /my_tickets - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ç–∏–∫–µ—Ç—ã\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç' –∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n"
        "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
async def create_ticket_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –≤–∞–º –ø–æ–º–æ—á—å."
    )
    await state.set_state(SupportStates.waiting_for_issue)

@dp.message(SupportStates.waiting_for_issue)
async def process_issue(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    issue_text = message.text
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞
    ticket_id = f"{len(tickets) + 1:04d}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç
    tickets[ticket_id] = {
        "id": ticket_id,
        "user_id": user_id,
        "user_name": user_name,
        "issue": issue_text,
        "status": "open",
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "messages": [
            {
                "from_user": user_id,
                "text": issue_text,
                "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
        ]
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã'.",
        reply_markup=get_main_keyboard(is_admin=is_admin(user_id))
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üì¢ **–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}**\n\n"
                f"–û—Ç: {user_name} (ID: {user_id})\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{issue_text}",
                reply_markup=get_ticket_keyboard(ticket_id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await state.clear()

@dp.message(F.text == "üîç –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã")
async def my_tickets_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
    user_id = message.from_user.id
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tickets = {tid: ticket for tid, ticket in tickets.items() if ticket["user_id"] == user_id}
    
    if not user_tickets:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n"
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç'."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
    response = "üîç **–í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:**\n\n"
    
    for tid, ticket in user_tickets.items():
        status_emoji = "üü¢" if ticket["status"] == "open" else "üî¥"
        response += f"{status_emoji} **–¢–∏–∫–µ—Ç #{tid}**\n"
        response += f"–°—Ç–∞—Ç—É—Å: {'–û—Ç–∫—Ä—ã—Ç' if ticket['status'] == 'open' else '–ó–∞–∫—Ä—ã—Ç'}\n"
        response += f"–°–æ–∑–¥–∞–Ω: {ticket['created_at']}\n"
        response += f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(ticket['messages'])}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_ticket:{tid}")]
        ])
        
        await message.answer(response, reply_markup=keyboard)
        response = ""  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–∫–µ—Ç–∞

@dp.callback_query(lambda c: c.data.startswith("view_ticket:"))
async def view_ticket_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞"""
    ticket_id = callback.data.split(":")[1]
    
    if ticket_id not in tickets:
        await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    ticket = tickets[ticket_id]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    if ticket["user_id"] != user_id and not is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    response = f"üìù **–¢–∏–∫–µ—Ç #{ticket_id}**\n"
    response += f"–°—Ç–∞—Ç—É—Å: {'üü¢ –û—Ç–∫—Ä—ã—Ç' if ticket['status'] == 'open' else 'üî¥ –ó–∞–∫—Ä—ã—Ç'}\n"
    response += f"–°–æ–∑–¥–∞–Ω: {ticket['created_at']}\n\n"
    
    for i, msg in enumerate(ticket["messages"]):
        sender = "üë§ –í—ã" if msg["from_user"] == user_id else "üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        response += f"{sender} ({msg['time']}):\n{msg['text']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = None
    if ticket["status"] == "open":
        if is_admin(user_id):
            keyboard = get_ticket_keyboard(ticket_id)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_ticket:{ticket_id}")]
            ])
    
    await callback.message.edit_text(response, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("reply_ticket:"))
async def reply_ticket_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç"""
    ticket_id = callback.data.split(":")[1]
    
    if ticket_id not in tickets:
        await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    ticket = tickets[ticket_id]
    
    if ticket["status"] != "open":
        await callback.answer("–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω")
        return
    
    await state.update_data(ticket_id=ticket_id)
    await state.set_state(SupportStates.waiting_for_reply)
    
    await callback.message.answer(
        f"üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:"
    )
    await callback.answer()

@dp.message(SupportStates.waiting_for_reply)
async def process_reply(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç"""
    data = await state.get_data()
    ticket_id = data.get("ticket_id")
    
    if not ticket_id or ticket_id not in tickets:
        await message.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω")
        await state.clear()
        return
    
    ticket = tickets[ticket_id]
    user_id = message.from_user.id
    reply_text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–∫–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    if ticket["user_id"] != user_id and not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É")
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    ticket["messages"].append({
        "from_user": user_id,
        "text": reply_text,
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        reply_markup=get_main_keyboard(is_admin=is_admin(user_id))
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω—É –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    recipient_id = ticket["user_id"] if is_admin(user_id) else ADMIN_IDS[0]
    
    try:
        sender_name = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" if is_admin(user_id) else message.from_user.full_name
        
        await bot.send_message(
            recipient_id,
            f"üì¢ **–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}**\n\n"
            f"–û—Ç: {sender_name}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{reply_text}",
            reply_markup=get_ticket_keyboard(ticket_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("close_ticket:"))
async def close_ticket_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞"""
    ticket_id = callback.data.split(":")[1]
    
    if ticket_id not in tickets:
        await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    ticket = tickets[ticket_id]
    user_id = callback.from_user.id
    
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã
    if not is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞")
        return
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
    ticket["status"] = "closed"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"üî¥ –¢–∏–∫–µ—Ç #{ticket_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            ticket["user_id"],
            f"üî¥ –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    await callback.answer("–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")

@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer(
        "‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@dp.message(F.text == "üìã –í—Å–µ —Ç–∏–∫–µ—Ç—ã")
async def all_tickets_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    if not tickets:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ, –ø–æ—Ç–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
    sorted_tickets = sorted(
        tickets.values(),
        key=lambda t: (0 if t["status"] == "open" else 1, t["created_at"]),
        reverse=True
    )
    
    for ticket in sorted_tickets[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ç–∏–∫–µ—Ç–æ–≤
        status_emoji = "üü¢" if ticket["status"] == "open" else "üî¥"
        response = f"{status_emoji} **–¢–∏–∫–µ—Ç #{ticket['id']}**\n"
        response += f"–û—Ç: {ticket['user_name']} (ID: {ticket['user_id']})\n"
        response += f"–°—Ç–∞—Ç—É—Å: {'–û—Ç–∫—Ä—ã—Ç' if ticket['status'] == 'open' else '–ó–∞–∫—Ä—ã—Ç'}\n"
        response += f"–°–æ–∑–¥–∞–Ω: {ticket['created_at']}\n"
        response += f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(ticket['messages'])}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_ticket:{ticket['id']}")]
        ])
        
        await message.answer(response, reply_markup=keyboard)

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tickets = len(tickets)
    open_tickets = sum(1 for t in tickets.values() if t["status"] == "open")
    closed_tickets = total_tickets - open_tickets
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users = set(t["user_id"] for t in tickets.values())
    total_users = len(users)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
    total_messages = sum(len(t["messages"]) for t in tickets.values())
    
    await message.answer(
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤**\n\n"
        f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
        f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tickets}\n"
        f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {closed_tickets}\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    user_id = message.from_user.id
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_admin=is_admin(user_id))
    )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SeaVPN...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
