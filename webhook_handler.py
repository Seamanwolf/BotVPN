#!/usr/bin/env python3
"""
Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Any
from flask import Flask, request, jsonify
from sqlalchemy.orm import Session

from database import SessionLocal, Payment, User, Subscription
from xui_client import XUIClient
from config import TARIFFS, REFERRAL_BONUS
from notifications import NotificationManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

app = Flask(__name__)
xui_client = XUIClient()
notification_manager = NotificationManager()

def verify_webhook_signature(request_body: bytes, signature: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook'–∞ –æ—Ç –ÆKassa
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ HMAC –ø–æ–¥–ø–∏—Å–∏
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return True

async def process_payment_webhook(payment_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–∞ –æ—Ç –ÆKassa
    """
    try:
        payment_id = payment_data.get("object", {}).get("id")
        status = payment_data.get("object", {}).get("status")
        paid = payment_data.get("object", {}).get("paid", False)
        
        if not payment_id:
            logging.error("Webhook: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payment_id")
            return {"success": False, "error": "Missing payment_id"}
        
        logging.info(f"Webhook: –ø–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}, —Å—Ç–∞—Ç—É—Å: {status}, –æ–ø–ª–∞—á–µ–Ω: {paid}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î
        db = SessionLocal()
        try:
            payment = db.query(Payment).filter(Payment.yookassa_payment_id == payment_id).first()
            if not payment:
                logging.error(f"Webhook: –ø–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return {"success": False, "error": "Payment not found"}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment.status = status
            if paid and status == "succeeded":
                payment.completed_at = datetime.utcnow()
                
                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                if payment.status != "completed":
                    await create_subscription_from_payment(payment, db)
                    
            db.commit()
            
            logging.info(f"Webhook: –ø–ª–∞—Ç–µ–∂ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å: {status}")
            return {"success": True, "message": "Payment updated"}
            
        finally:
            db.close()
            
    except Exception as e:
        logging.error(f"Webhook: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return {"success": False, "error": str(e)}

async def create_subscription_from_payment(payment: Payment, db: Session):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == payment.user_id).first()
        if not user:
            logging.error(f"Webhook: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {payment.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
        tariff = payment.subscription_type
        if tariff == "1m":
            days = TARIFFS["1m"]["days"]
            tariff_name = TARIFFS["1m"]["name"]
        elif tariff == "3m":
            days = TARIFFS["3m"]["days"]
            tariff_name = TARIFFS["3m"]["name"]
        elif tariff == "test":
            days = TARIFFS["test"]["days"]
            tariff_name = TARIFFS["test"]["name"]
        else:
            logging.error(f"Webhook: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ {tariff}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ 3xUI
        user_email = user.email if user.email else f"user_{user.telegram_id}@vpn.local"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
        existing_subscriptions = db.query(Subscription).filter(Subscription.user_id == user.id).all()
        next_subscription_number = max([s.subscription_number for s in existing_subscriptions], default=0) + 1
        
        xui_result = await xui_client.create_user(
            user_email, 
            days, 
            f"{user.full_name} (PAID)", 
            str(user.telegram_id), 
            next_subscription_number
        )
        
        if xui_result:
            config = await xui_client.get_user_config(xui_result["email"], next_subscription_number)
            
            if config:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
                expires_at = datetime.utcnow() + timedelta(days=days)
                
                subscription = Subscription(
                    user_id=user.id,
                    plan=tariff,
                    plan_name=tariff_name,
                    status="active",
                    subscription_number=next_subscription_number,
                    expires_at=expires_at
                )
                db.add(subscription)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                payment.status = "completed"
                payment.completed_at = datetime.utcnow()
                
                db.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                apps_text = "\nüì± <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
                apps_text += "<b>Android:</b>\n"
                apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.v2ray.ang\">V2rayNG</a>\n"
                apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.github.kr328.clash\">Clash for Android</a>\n\n"
                apps_text += "<b>iPhone:</b>\n"
                apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/streisand/id6450534064\">Streisand</a>\n"
                apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/shadowrocket/id932747118\">Shadowrocket</a>\n\n"
                apps_text += "<b>Windows:</b>\n"
                apps_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">Hiddify</a>\n"
                apps_text += "‚Ä¢ <a href=\"https://github.com/2dust/v2rayN/releases\">V2rayN</a>\n\n"
                apps_text += "<b>Mac:</b>\n"
                apps_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">FoxRay</a>\n"
                apps_text += "‚Ä¢ <a href=\"https://github.com/yichengchen/clashX/releases\">ClashX</a>\n\n"
                
                success_message = f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                success_message += f"üìã <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}\n"
                success_message += f"üí∞ <b>–°—É–º–º–∞:</b> {payment.amount}‚ÇΩ\n"
                success_message += f"‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                success_message += f"üîó <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
                if isinstance(config, dict) and 'subscription_url' in config:
                    success_message += f"<code>{config['subscription_url']}</code>\n\n"
                else:
                    success_message += f"<code>{config}</code>\n\n"
                success_message += apps_text
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                from bot import bot
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=success_message,
                    parse_mode="HTML"
                )
                
                # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ
                if user.referred_by and not user.has_made_first_purchase:
                    referrer = db.query(User).filter(User.id == user.referred_by).first()
                    if referrer:
                        referrer.bonus_coins += REFERRAL_BONUS
                        user.has_made_first_purchase = True
                        db.merge(referrer)
                        db.merge(user)
                        db.commit()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
                        await notification_manager.notify_referral_bonus(referrer.telegram_id, user.full_name)
                
                logging.info(f"Webhook: –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            else:
                logging.error(f"Webhook: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        else:
            logging.error(f"Webhook: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 3xUI –¥–ª—è {user.telegram_id}")
            
    except Exception as e:
        logging.error(f"Webhook: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@app.route('/webhook/yookassa', methods=['POST'])
def yookassa_webhook():
    """
    Webhook endpoint –¥–ª—è –ÆKassa
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook'–∞
        webhook_data = request.get_json()
        
        if not webhook_data:
            logging.error("Webhook: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return jsonify({"error": "Empty data"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
        signature = request.headers.get('X-YooKassa-Signature')
        if not verify_webhook_signature(request.data, signature):
            logging.error("Webhook: –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")
            return jsonify({"error": "Invalid signature"}), 401
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.create_task(process_payment_webhook(webhook_data))
        
        logging.info("Webhook: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        return jsonify({"success": True}), 200
        
    except Exception as e:
        logging.error(f"Webhook: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/webhook/health', methods=['GET'])
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è webhook —Å–µ—Ä–≤–µ—Ä–∞
    """
    return jsonify({"status": "ok", "timestamp": datetime.utcnow().isoformat()})

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=5001, debug=False)
