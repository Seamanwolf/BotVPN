#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ systemd —Å–µ—Ä–≤–∏—Å–æ–≤ SeaVPN
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import subprocess
import smtplib
import requests
import json
import time
import logging
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs('/var/log/seavpn', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/seavpn/service_monitor.log'),
        logging.StreamHandler()
    ]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVICES = [
    'seavpn-bot.service',
    'seavpn-support-bot.service', 
    'seavpn-webhook.service',
    'seavpn-admin.service'
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_EMAIL = os.getenv('ADMIN_EMAIL', 'your-email@example.com')
BOT_TOKEN = "8394863099:AAGQ3w7Y7WnYr9kfji_UcFc3jV-I--TIIvQ"
ADMIN_TELEGRAM_ID = 261337953  # –í–∞—à Telegram ID

# –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
ENABLE_EMAIL_NOTIFICATIONS = False  # –û—Ç–∫–ª—é—á–∞–µ–º email, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ Telegram

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π)
service_states = {}

def check_service_status(service_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        result = subprocess.run(
            ['systemctl', 'is-active', service_name],
            capture_output=True,
            text=True,
            timeout=10
        )
        return result.stdout.strip() == 'active'
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
        return False

def get_service_logs(service_name, lines=10):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        result = subprocess.run(
            ['journalctl', '-u', service_name, '-n', str(lines), '--no-pager'],
            capture_output=True,
            text=True,
            timeout=30
        )
        return result.stdout
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ {service_name}: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏"

def send_email_notification(service_name, status, logs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É"""
    try:
        msg = MIMEMultipart()
        msg['From'] = 'root@seavpn.local'
        msg['To'] = ADMIN_EMAIL
        msg['Subject'] = f'üö® SeaVPN: –°–µ—Ä–≤–∏—Å {service_name} —É–ø–∞–ª!'
        
        body = f"""
üö® –í–ù–ò–ú–ê–ù–ò–ï! –°–µ—Ä–≤–∏—Å SeaVPN —É–ø–∞–ª!

üìã –°–µ—Ä–≤–∏—Å: {service_name}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üìä –°—Ç–∞—Ç—É—Å: {status}

üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:
{logs}

üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: journalctl -u {service_name} -f
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å: systemctl restart {service_name}
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞: htop, df -h

---
SeaVPN Service Monitor
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π postfix
        with smtplib.SMTP('localhost') as server:
            server.send_message(msg)
        
        logging.info(f"Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {service_name}")
        return True
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –¥–ª—è {service_name}: {e}")
        return False

def send_telegram_notification(service_name, status, logs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    try:
        message = f"""
üö® **SeaVPN: –°–µ—Ä–≤–∏—Å —É–ø–∞–ª!**

üìã **–°–µ—Ä–≤–∏—Å:** `{service_name}`
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üìä **–°—Ç–∞—Ç—É—Å:** {status}

üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:**
```
{logs[:1000]}...
```

üîß **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: `journalctl -u {service_name} -f`
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: `systemctl restart {service_name}`
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã: `htop`, `df -h`

---
SeaVPN Service Monitor
        """
        
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': ADMIN_TELEGRAM_ID,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        response = requests.post(url, data=data, timeout=10)
        response.raise_for_status()
        
        logging.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {service_name}")
        return True
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –¥–ª—è {service_name}: {e}")
        return False

def monitor_services():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logging.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ SeaVPN...")
    
    while True:
        try:
            for service in SERVICES:
                current_status = check_service_status(service)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
                if service not in service_states:
                    service_states[service] = current_status
                    logging.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ {service}: {'–∞–∫—Ç–∏–≤–µ–Ω' if current_status else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
                    continue
                
                previous_status = service_states[service]
                
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —É–ø–∞–ª
                if previous_status and not current_status:
                    logging.warning(f"üö® –°–µ—Ä–≤–∏—Å {service} —É–ø–∞–ª!")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
                    logs = get_service_logs(service)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if ENABLE_EMAIL_NOTIFICATIONS:
                        send_email_notification(service, "–£–ø–∞–ª", logs)
                    send_telegram_notification(service, "–£–ø–∞–ª", logs)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    service_states[service] = current_status
                
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
                elif not previous_status and current_status:
                    logging.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è!")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
                    recovery_message = f"‚úÖ –°–µ—Ä–≤–∏—Å {service} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    
                    try:
                        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                        data = {
                            'chat_id': ADMIN_TELEGRAM_ID,
                            'text': recovery_message,
                            'parse_mode': 'Markdown'
                        }
                        requests.post(url, data=data, timeout=10)
                    except:
                        pass
                    
                    service_states[service] = current_status
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (30 —Å–µ–∫—É–Ω–¥)
            time.sleep(30)
            
        except KeyboardInterrupt:
            logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs('/var/log/seavpn', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor_services()
