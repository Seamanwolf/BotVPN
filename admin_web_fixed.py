@app.route('/tickets')
@login_required
def tickets():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–∏–∫–µ—Ç–æ–≤"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        tickets_query = db.query(Ticket).order_by(
            Ticket.status,  # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ (open < closed)
            Ticket.updated_at.desc()  # –ó–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        ).all()
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for ticket in tickets_query:
            user = db.query(User).filter(User.id == ticket.user_id).first()
            if user:
                ticket.user_name = user.full_name
                ticket.user = user
            else:
                ticket.user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                ticket.user = None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
            ticket.messages = db.query(TicketMessage).filter(
                TicketMessage.ticket_id == ticket.id
            ).order_by(TicketMessage.created_at).all()
        
        return render_template('tickets.html', tickets=tickets_query)
    finally:
        db.close()

@app.route('/api/ticket/<int:ticket_id>')
@login_required
def get_ticket_details(ticket_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞"""
    db = SessionLocal()
    try:
        ticket = db.query(Ticket).filter(Ticket.id == ticket_id).first()
        if ticket:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.id == ticket.user_id).first()
            user_name = user.full_name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = db.query(TicketMessage).filter(
                TicketMessage.ticket_id == ticket.id
            ).order_by(TicketMessage.created_at).all()
            
            messages_list = []
            for msg in messages:
                sender = db.query(User).filter(User.id == msg.sender_id).first() if msg.sender_id else None
                sender_name = sender.full_name if sender else "–°–∏—Å—Ç–µ–º–∞"
                
                messages_list.append({
                    'id': msg.id,
                    'sender_id': msg.sender_id,
                    'sender_name': sender_name,
                    'sender_type': msg.sender_type,
                    'message': msg.message,
                    'created_at': msg.created_at.strftime('%Y-%m-%d %H:%M:%S')
                })
            
            return jsonify({
                'success': True, 
                'ticket': {
                    'id': ticket.id,
                    'ticket_number': ticket.ticket_number,
                    'user_id': ticket.user_id,
                    'user_name': user_name,
                    'status': ticket.status,
                    'subject': ticket.subject,
                    'created_at': ticket.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                    'updated_at': ticket.updated_at.strftime('%Y-%m-%d %H:%M:%S'),
                    'closed_at': ticket.closed_at.strftime('%Y-%m-%d %H:%M:%S') if ticket.closed_at else None
                },
                'messages': messages_list
            })
        else:
            return jsonify({'success': False, 'message': '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    finally:
        db.close()

@app.route('/api/ticket/<int:ticket_id>/reply', methods=['POST'])
@login_required
def reply_to_ticket(ticket_id):
    """API –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç"""
    try:
        message = request.json.get('message', '')
        if not message:
            return jsonify({'success': False, 'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'})
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç
            ticket = db.query(Ticket).filter(Ticket.id == ticket_id).first()
            if not ticket:
                return jsonify({'success': False, 'error': '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
            
            if ticket.status != 'open':
                return jsonify({'success': False, 'error': '–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω'})
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            ticket_message = TicketMessage(
                ticket_id=ticket.id,
                sender_id=None,  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—á–µ—Ä–µ–∑ –≤–µ–±-–ø–∞–Ω–µ–ª—å)
                sender_type="admin",
                message=message
            )
            db.add(ticket_message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
            ticket.updated_at = datetime.utcnow()
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = db.query(User).filter(User.id == ticket.user_id).first()
                if user:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    sys.path.append(os.path.join(os.path.dirname(__file__), 'support_bot'))
                    from support_bot.bot import bot as support_bot
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    asyncio.run(support_bot.send_message(
                        user.telegram_id,
                        f"üì¢ **–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç #{ticket.ticket_number}**\n\n"
                        f"–û—Ç: –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                        f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}",
                        reply_markup=None
                    ))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            return jsonify({'success': True, 'message': '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'})
        finally:
            db.close()
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/ticket/<int:ticket_id>/close', methods=['POST'])
@login_required
def close_ticket(ticket_id):
    """API –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞"""
    try:
        message = request.json.get('message')
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç
            ticket = db.query(Ticket).filter(Ticket.id == ticket_id).first()
            if not ticket:
                return jsonify({'success': False, 'error': '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
            
            if ticket.status == 'closed':
                return jsonify({'success': False, 'error': '–¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç'})
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
            ticket.status = 'closed'
            ticket.closed_at = datetime.utcnow()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
            ticket_message = TicketMessage(
                ticket_id=ticket.id,
                sender_id=None,
                sender_type="system",
                message="–¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )
            db.add(ticket_message)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if message:
                admin_message = TicketMessage(
                    ticket_id=ticket.id,
                    sender_id=None,
                    sender_type="admin",
                    message=message
                )
                db.add(admin_message)
            
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = db.query(User).filter(User.id == ticket.user_id).first()
                if user:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    sys.path.append(os.path.join(os.path.dirname(__file__), 'support_bot'))
                    from support_bot.bot import bot as support_bot
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    notification = f"üî¥ –í–∞—à —Ç–∏–∫–µ—Ç #{ticket.ticket_number} –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n\n"
                    if message:
                        notification += f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message}\n\n"
                    notification += "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç."
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    asyncio.run(support_bot.send_message(
                        user.telegram_id,
                        notification,
                        reply_markup=None
                    ))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            return jsonify({'success': True, 'message': '–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç'})
        finally:
            db.close()
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=False)