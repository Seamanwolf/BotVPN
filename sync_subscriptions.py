#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å 3xUI
–ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å active/expired –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
from datetime import datetime, timezone, timedelta
from database import SessionLocal, User, Subscription
from xui_client import XUIClient

async def sync_subscription_status():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å 3xUI"""
    
    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 3xUI...")
    xui_client = XUIClient()
    await xui_client.login()
    inbounds = await xui_client.get_inbounds()
    
    # –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ email –∏–∑ 3xUI
    active_emails = set()
    if inbounds and inbounds.get('obj'):
        for inbound in inbounds['obj']:
            settings_str = inbound.get('settings', '{}')
            try:
                settings = json.loads(settings_str)
                clients = settings.get('clients', [])
                
                for client_config in clients:
                    if client_config.get('enable'):
                        email = client_config.get('email')
                        if email:
                            active_emails.add(email)
                            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –≤ 3xUI: {email}")
                            
            except json.JSONDecodeError as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings: {e}")
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(active_emails)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 3xUI")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        
        for user in users:
            print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.email})")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriptions = db.query(Subscription).filter(Subscription.user_id == user.id).all()
            
            if user.email in active_emails:
                print(f"   ‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ 3xUI")
                # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ
                for sub in subscriptions:
                    if sub.status != "active":
                        print(f"   üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É ID: {sub.id}")
                        sub.status = "active"
            else:
                print(f"   ‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ 3xUI")
                # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ
                for sub in subscriptions:
                    if sub.status == "active":
                        print(f"   üîÑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É ID: {sub.id}")
                        sub.status = "expired"
            
            db.commit()
        
        print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    finally:
        db.close()

if __name__ == "__main__":
    asyncio.run(sync_subscription_status())
