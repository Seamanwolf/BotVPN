#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ 3xUI
"""

import asyncio
import json
from datetime import datetime, timezone, timedelta
from database import SessionLocal, User, Subscription
from xui_client import XUIClient

async def fix_subscriptions():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ 3xUI"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 3xUI
    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 3xUI...")
    xui_client = XUIClient()
    await xui_client.login()
    inbounds = await xui_client.get_inbounds()
    
    active_clients = {}
    if inbounds and inbounds.get('obj'):
        for inbound in inbounds['obj']:
            settings_str = inbound.get('settings', '{}')
            try:
                settings = json.loads(settings_str)
                clients = settings.get('clients', [])
                
                for client_config in clients:
                    if client_config.get('enable'):
                        email = client_config.get('email')
                        client_id = client_config.get('id')
                        expiry_time = client_config.get('expiryTime', 0)
                        tg_id = client_config.get('tgId')
                        
                        if email:
                            active_clients[email] = {
                                'id': client_id,
                                'expiry_time': expiry_time,
                                'tg_id': tg_id,
                                'sub_id': client_config.get('subId')
                            }
                            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {email} (ID: {client_id})")
                            
            except json.JSONDecodeError as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings: {e}")
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(active_clients)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 3xUI")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        
        for user in users:
            print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.email})")
            
            if user.email in active_clients:
                client_info = active_clients[user.email]
                print(f"   ‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ 3xUI")
                print(f"   ID: {client_info['id']}")
                print(f"   TG ID: {client_info['tg_id']}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
                if client_info['expiry_time'] > 0:
                    epoch = datetime.fromtimestamp(0, timezone.utc)
                    expiry_date = epoch + timedelta(milliseconds=client_info['expiry_time'])
                    print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date}")
                else:
                    expiry_date = None
                    print(f"   –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                subscriptions = db.query(Subscription).filter(Subscription.user_id == user.id).all()
                
                if len(subscriptions) > 1:
                    print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é")
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
                    sorted_subs = sorted(subscriptions, key=lambda x: x.created_at, reverse=True)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å–∞–º–æ–π –Ω–æ–≤–æ–π
                    for sub in sorted_subs[1:]:
                        print(f"   üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É ID: {sub.id}")
                        db.delete(sub)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–¥–ø–∏—Å–∫—É
                    main_subscription = sorted_subs[0]
                    main_subscription.status = "active"
                    if expiry_date:
                        main_subscription.expires_at = expiry_date
                    
                    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ID: {main_subscription.id}")
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    for sub in subscriptions:
                        sub.status = "active"
                        if expiry_date:
                            sub.expires_at = expiry_date
                        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ID: {sub.id}")
                
                db.commit()
                
            else:
                print(f"   ‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ 3xUI")
                
                # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ
                subscriptions = db.query(Subscription).filter(Subscription.user_id == user.id).all()
                for sub in subscriptions:
                    if sub.status == "active":
                        print(f"   üîÑ –ü–æ–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É ID: {sub.id} –∫–∞–∫ –∏—Å—Ç–µ–∫—à—É—é")
                        sub.status = "expired"
                
                db.commit()
        
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    finally:
        db.close()

if __name__ == "__main__":
    asyncio.run(fix_subscriptions())
