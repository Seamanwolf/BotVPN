import asyncio
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, Contact
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from config import BOT_TOKEN, TARIFFS
from database import SessionLocal, User, Subscription, create_tables

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_contact = State()
    waiting_for_name = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_contact_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º ‚òéÔ∏è", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="–ú–æ–∏ –∫–ª—é—á–∏")],
            [KeyboardButton(text="–ö—É–ø–∏—Ç—å –∫–ª—é—á"), KeyboardButton(text="–ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_tariffs_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"1 –º–µ—Å—è—Ü - {TARIFFS['1m']['price']}‚ÇΩ")],
            [KeyboardButton(text=f"3 –º–µ—Å—è—Ü–∞ - {TARIFFS['3m']['price']}‚ÇΩ")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –í–∞–ª–∏–¥–∞—Ü–∏—è email
def is_valid_email(email: str) -> bool:
    try:
        validate_email(email)
        return True
    except EmailNotValidError:
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
async def get_user(telegram_id: int) -> User:
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        return user
    finally:
        db.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async def save_user(telegram_id: int, phone: str, full_name: str) -> User:
    db = SessionLocal()
    try:
        user = User(
            telegram_id=telegram_id,
            phone=phone,
            email=None,  # Email –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            full_name=full_name
        )
        db.add(user)
        db.commit()
        db.refresh(user)
        return user
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        await state.set_state(RegistrationStates.waiting_for_contact)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ\n\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_contact_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(RegistrationStates.waiting_for_contact, F.contact)
async def contact_handler(message: Message, state: FSMContext):
    contact: Contact = message.contact
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if contact.user_id != message.from_user.id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(phone=contact.phone_number)
    await state.set_state(RegistrationStates.waiting_for_name)
    
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(RegistrationStates.waiting_for_name)
async def name_handler(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="/start")]], resize_keyboard=True))
        return
    
    full_name = message.text.strip()
    
    if len(full_name) < 2:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    phone = data.get("phone")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await save_user(message.from_user.id, phone, full_name)
    
    await state.clear()
    
    await message.answer(
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text.in_(["–ü—Ä–æ—Ñ–∏–ª—å", "–ú–æ–∏ –∫–ª—é—á–∏", "–ö—É–ø–∏—Ç—å –∫–ª—é—á", "–ü–æ–º–æ—â—å"]))
async def main_menu_handler(message: Message):
    user = await get_user(message.from_user.id)
    
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        db = SessionLocal()
        try:
            active_subscription = db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.status == "active"
            ).first()
            
            subscription_info = ""
            if active_subscription:
                expires = active_subscription.expires_at.strftime("%d.%m.%Y")
                subscription_info = f"\n–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expires}"
            else:
                subscription_info = "\n–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–µ—Ç"
                
        finally:
            db.close()
        
        await message.answer(
            f"üìã –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–ò–º—è: {user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
            f"{subscription_info}",
            reply_markup=get_main_menu_keyboard()
        )
    
    elif message.text == "–ú–æ–∏ –∫–ª—é—á–∏":
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        db = SessionLocal()
        try:
            active_subscription = db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.status == "active"
            ).first()
            
            if active_subscription and active_subscription.xui_config:
                await message.answer(
                    f"üîë –í–∞—à–∏ –∫–ª—é—á–∏\n\n"
                    f"–¢–∞—Ä–∏—Ñ: {active_subscription.plan}\n"
                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {active_subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n`{active_subscription.xui_config}`",
                    parse_mode="Markdown",
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                await message.answer(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ö—É–ø–∏—Ç—å –∫–ª—é—á'.",
                    reply_markup=get_main_menu_keyboard()
                )
        finally:
            db.close()
    
    elif message.text == "–ö—É–ø–∏—Ç—å –∫–ª—é—á":
        await message.answer(
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:\n\n"
            f"‚Ä¢ 1 –º–µ—Å—è—Ü - {TARIFFS['1m']['price']}‚ÇΩ\n"
            f"‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - {TARIFFS['3m']['price']}‚ÇΩ",
            reply_markup=get_tariffs_keyboard()
        )
    
    elif message.text == "–ü–æ–º–æ—â—å":
        await message.answer(
            "‚ùì –ü–æ–º–æ—â—å\n\n"
            "‚Ä¢ –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @support\n"
            "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–∏–¥—É—Ç –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏\n"
            "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: 24/7\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!",
            reply_markup=get_main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
@dp.message(F.text.contains("–º–µ—Å—è—Ü"))
async def tariff_handler(message: Message):
    user = await get_user(message.from_user.id)
    
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    if "1 –º–µ—Å—è—Ü" in message.text:
        tariff = "1m"
        price = TARIFFS["1m"]["price"]
        months = TARIFFS["1m"]["months"]
    elif "3 –º–µ—Å—è—Ü–∞" in message.text:
        tariff = "3m"
        price = TARIFFS["3m"]["price"]
        months = TARIFFS["3m"]["months"]
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_tariffs_keyboard())
        return
    
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
        return
    
    # –î–µ–º–æ-–≤–µ—Ä—Å–∏—è: —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    demo_config = f"vless://demo-user@user_{user.telegram_id}.local:443?type=tcp&security=reality&sni=example.com&fp=chrome&pbk=demo-key&sid=123456&spx=%2F#user_{user.telegram_id}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
    db = SessionLocal()
    try:
        subscription = Subscription(
            user_id=user.id,
            plan=tariff,
            status="active",
            expires_at=datetime.utcnow() + timedelta(days=30*months),
            xui_config=demo_config
        )
        db.add(subscription)
        db.commit()
        
        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! (–î–ï–ú–û-–†–ï–ñ–ò–ú)\n\n"
            f"–¢–∞—Ä–∏—Ñ: {TARIFFS[tariff]['name']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
            f"–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ç–µ—Å—Ç–æ–≤–∞—è):\n`{demo_config}`\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç 3xUI.",
            parse_mode="Markdown",
            reply_markup=get_main_menu_keyboard()
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_handler(message: Message):
    user = await get_user(message.from_user.id)
    
    if user:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start"
        )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
    create_tables()
    
    print("–î–µ–º–æ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("‚ö†Ô∏è  –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 3xUI")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
