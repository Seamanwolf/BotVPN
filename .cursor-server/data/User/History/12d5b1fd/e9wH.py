#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import asyncio
from datetime import datetime, timedelta
from typing import List
from database import SessionLocal, User, Subscription
from config import REFERRAL_BONUS, BONUS_TO_SUBSCRIPTION

class NotificationManager:
    def __init__(self, bot):
        self.bot = bot
    
    async def check_expiring_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç"""
        db = SessionLocal()
        try:
            # –ü–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è
            three_days_from_now = datetime.utcnow() + timedelta(days=3)
            expiring_soon = db.query(Subscription).filter(
                Subscription.status == "active",
                Subscription.expires_at <= three_days_from_now,
                Subscription.expires_at > datetime.utcnow()
            ).all()
            
            for subscription in expiring_soon:
                user = db.query(User).filter(User.id == subscription.user_id).first()
                if user:
                    days_left = (subscription.expires_at - datetime.utcnow()).days
                    
                    if days_left == 0:
                        # –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è
                        message = (
                            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!\n\n"
                            f"–¢–∞—Ä–∏—Ñ: {subscription.plan}\n"
                            f"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                            f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ö—É–ø–∏—Ç—å –∫–ª—é—á'"
                        )
                    else:
                        # –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
                        message = (
                            f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π\n\n"
                            f"–¢–∞—Ä–∏—Ñ: {subscription.plan}\n"
                            f"–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
                            f"–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ"
                        )
                    
                    try:
                        await self.bot.send_message(user.telegram_id, message)
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            # –ü–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∏
            expired = db.query(Subscription).filter(
                Subscription.status == "active",
                Subscription.expires_at <= datetime.utcnow()
            ).all()
            
            for subscription in expired:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                subscription.status = "expired"
                
                user = db.query(User).filter(User.id == subscription.user_id).first()
                if user:
                    message = (
                        f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n\n"
                        f"–¢–∞—Ä–∏—Ñ: {subscription.plan}\n"
                        f"–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
                        f"–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ö—É–ø–∏—Ç—å –∫–ª—é—á'"
                    )
                    
                    try:
                        await self.bot.send_message(user.telegram_id, message)
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            db.commit()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            db.rollback()
        finally:
            db.close()
    
    async def notify_referral_bonus(self, referrer_id: int, referred_user_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
        db = SessionLocal()
        try:
            referrer = db.query(User).filter(User.id == referrer_id).first()
            if referrer:
                message = (
                    f"üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!\n\n"
                    f"–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {referred_user_name}\n\n"
                    f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: +{REFERRAL_BONUS} –º–æ–Ω–µ—Ç\n"
                    f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {referrer.bonus_coins} –º–æ–Ω–µ—Ç\n\n"
                    f"üí° –ù–∞–ø–æ–º–Ω–∏–º: {BONUS_TO_SUBSCRIPTION} –º–æ–Ω–µ—Ç = 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏\n"
                    f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'"
                )
                
                try:
                    await self.bot.send_message(referrer.telegram_id, message)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer.telegram_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer.telegram_id}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ: {e}")
        finally:
            db.close()
    
    async def notify_subscription_purchased(self, user_id: int, plan: str, price: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.id == user_id).first()
            if user:
                message = (
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞!\n\n"
                    f"–¢–∞—Ä–∏—Ñ: {plan}\n"
                    f"–°—É–º–º–∞: {price}‚ÇΩ\n"
                    f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∫–ª—é—á–∏'"
                )
                
                try:
                    await self.bot.send_message(user.telegram_id, message)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ: {e}")
        finally:
            db.close()

async def run_notification_scheduler(bot):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notification_manager = NotificationManager(bot)
    
    while True:
        try:
            await notification_manager.check_expiring_subscriptions()
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        await asyncio.sleep(6 * 60 * 60)
