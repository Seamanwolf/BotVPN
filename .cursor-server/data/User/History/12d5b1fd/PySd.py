#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import asyncio
from datetime import datetime, timedelta
from typing import List
from database import SessionLocal, User, Subscription
from config import REFERRAL_BONUS, BONUS_TO_SUBSCRIPTION
from xui_client import XUIClient
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

class NotificationManager:
    def __init__(self, bot):
        self.bot = bot
    
    async def check_expiring_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç"""
        db = SessionLocal()
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å 3xUI
            await self.sync_with_xui(db)
            
            # –ü–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
            three_days_from_now = datetime.utcnow() + timedelta(days=3)
            expiring_soon = db.query(Subscription).filter(
                Subscription.status == "active",
                Subscription.expires_at <= three_days_from_now,
                Subscription.expires_at > datetime.utcnow()
            ).all()
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(expiring_soon)} –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è")
            
            for subscription in expiring_soon:
                user = db.query(User).filter(User.id == subscription.user_id).first()
                if user:
                    days_left = (subscription.expires_at - datetime.utcnow()).days
                    
                    if days_left == 0:
                        # –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è
                        message = (
                            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!\n\n"
                            f"–¢–∞—Ä–∏—Ñ: {subscription.plan}\n"
                            f"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                            f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:"
                        )
                        
                        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü (149‚ÇΩ)", callback_data=f"extend_1m_{subscription.id}"),
                                InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (399‚ÇΩ)", callback_data=f"extend_3m_{subscription.id}")
                            ]
                        ])
                    else:
                        # –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
                        message = (
                            f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π\n\n"
                            f"–¢–∞—Ä–∏—Ñ: {subscription.plan}\n"
                            f"–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
                            f"–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ:"
                        )
                        
                        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü (149‚ÇΩ)", callback_data=f"extend_1m_{subscription.id}"),
                                InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (399‚ÇΩ)", callback_data=f"extend_3m_{subscription.id}")
                            ]
                        ])
                    
                    try:
                        await self.bot.send_message(user.telegram_id, message, reply_markup=keyboard)
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            # –ü–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
            expired = db.query(Subscription).filter(
                Subscription.status == "active",
                Subscription.expires_at <= datetime.utcnow()
            ).all()
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(expired)} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            
            for subscription in expired:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                subscription.status = "expired"
                
                user = db.query(User).filter(User.id == subscription.user_id).first()
                if user:
                    message = (
                        f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n\n"
                        f"–¢–∞—Ä–∏—Ñ: {subscription.plan}\n"
                        f"–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
                        f"–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:"
                    )
                    
                    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü (149‚ÇΩ)", callback_data=f"extend_1m_{subscription.id}"),
                            InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (399‚ÇΩ)", callback_data=f"extend_3m_{subscription.id}")
                        ]
                    ])
                    
                    try:
                        await self.bot.send_message(user.telegram_id, message, reply_markup=keyboard)
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            db.commit()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            db.rollback()
        finally:
            db.close()
    
    async def sync_with_xui(self, db):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å 3xUI"""
        try:
            xui_client = XUIClient()
            sync_result = await xui_client.sync_subscriptions()
            
            if sync_result.get("success"):
                active_clients = sync_result.get("active_clients", [])
                active_emails = [client["email"] for client in active_clients]
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ë–î
                active_subscriptions = db.query(Subscription).filter(
                    Subscription.status == "active"
                ).all()
                
                for subscription in active_subscriptions:
                    user = db.query(User).filter(User.id == subscription.user_id).first()
                    if user:
                        user_email = user.email if user.email else f"user_{user.telegram_id}@vpn.local"
                        
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ 3xUI, –ø–æ–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –∏—Å—Ç–µ–∫—à—É—é
                        if user_email not in active_emails:
                            subscription.status = "expired"
                            print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∞—è (—É–¥–∞–ª–µ–Ω–∞ –∏–∑ 3xUI)")
                        else:
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ 3xUI, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                            # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ 3xUI
                            client_info = None
                            for client in active_clients:
                                if client["email"] == user_email:
                                    client_info = client
                                    break
                            
                            if client_info:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                                current_time = datetime.utcnow()
                                if subscription.expires_at <= current_time:
                                    subscription.status = "expired"
                                    print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∞—è (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)")
                
                db.commit()
                print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 3xUI: {len(active_clients)}")
            else:
                print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å 3xUI: {sync_result.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å 3xUI: {e}")
    
    async def notify_referral_bonus(self, referrer_id: int, referred_user_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
        db = SessionLocal()
        try:
            referrer = db.query(User).filter(User.id == referrer_id).first()
            if referrer:
                message = (
                    f"üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!\n\n"
                    f"–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {referred_user_name}\n\n"
                    f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: +{REFERRAL_BONUS} –º–æ–Ω–µ—Ç\n"
                    f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {referrer.bonus_coins} –º–æ–Ω–µ—Ç\n\n"
                    f"üí° –ù–∞–ø–æ–º–Ω–∏–º: {BONUS_TO_SUBSCRIPTION} –º–æ–Ω–µ—Ç = 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏\n"
                    f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'"
                )
                
                try:
                    await self.bot.send_message(referrer.telegram_id, message)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer.telegram_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer.telegram_id}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ: {e}")
        finally:
            db.close()
    
    async def notify_subscription_purchased(self, user_id: int, plan: str, price: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.id == user_id).first()
            if user:
                message = (
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞!\n\n"
                    f"–¢–∞—Ä–∏—Ñ: {plan}\n"
                    f"–°—É–º–º–∞: {price}‚ÇΩ\n"
                    f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∫–ª—é—á–∏'"
                )
                
                try:
                    await self.bot.send_message(user.telegram_id, message)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ: {e}")
        finally:
            db.close()

async def run_notification_scheduler(bot):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notification_manager = NotificationManager(bot)
    
    while True:
        try:
            await notification_manager.check_expiring_subscriptions()
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        await asyncio.sleep(6 * 60 * 60)
