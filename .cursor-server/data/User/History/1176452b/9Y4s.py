import httpx
import json
from typing import Dict, Any, Optional
from config import XUI_BASE_URL, XUI_PORT, XUI_WEBBASEPATH, XUI_USERNAME, XUI_PASSWORD

class XUIClient:
    def __init__(self):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL —Å –ø–æ—Ä—Ç–æ–º –∏ –±–∞–∑–æ–≤—ã–º –ø—É—Ç–µ–º
        if XUI_PORT:
            self.base_url = f"http://{XUI_BASE_URL}:{XUI_PORT}"
        else:
            self.base_url = f"http://{XUI_BASE_URL}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if XUI_WEBBASEPATH:
            self.base_url += f"/{XUI_WEBBASEPATH}"
        
        # print(f"DEBUG: Base URL = {self.base_url}")
        
        self.username = XUI_USERNAME
        self.password = XUI_PASSWORD
        self.client = httpx.AsyncClient(follow_redirects=True)
        self.session_cookies = None
        self.logged_in = False
    
    async def login(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ 3xUI"""
        if self.logged_in:
            return True
            
        try:
            login_url = f"{self.base_url}/login"
            # print(f"DEBUG: Login URL = {login_url}")
            
            login_data = {
                "username": self.username,
                "password": self.password
            }
            
            # print(f"DEBUG: Login data = {login_data}")
            
            response = await self.client.post(
                login_url,
                json=login_data,
                headers={"Content-Type": "application/json"}
            )
            
            # print(f"DEBUG: Login response status = {response.status_code}")
            # print(f"DEBUG: Login response text = {response.text[:200]}...")
            
            if response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.session_cookies = response.cookies
                self.logged_in = True
                # print("DEBUG: Login successful")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def ensure_login(self):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"""
        if not self.logged_in:
            await self.login()
    
    async def get_inbounds(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ inbounds"""
        await self.ensure_login()
        
        try:
            inbounds_url = f"{self.base_url}/panel/api/inbounds/list"
            # print(f"DEBUG: Inbounds URL = {inbounds_url}")
            
            response = await self.client.get(
                inbounds_url,
                cookies=self.session_cookies
            )
            
            # print(f"DEBUG: Inbounds response status = {response.status_code}")
            # print(f"DEBUG: Inbounds response text = {response.text[:200]}...")
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbounds: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ inbounds: {e}")
            return None
    
    async def create_user(self, email: str, days: int = 30, note: str = "", tg_id: str = "") -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 3xUI –∏—Å–ø–æ–ª—å–∑—É—è addClient API"""
        await self.ensure_login()
        
        try:
            import json
            import uuid
            from datetime import datetime, timezone
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π vless_id
            vless_id = str(uuid.uuid4())
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º subId –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞—Ä–∏—Ñ–∞
            if days == 1:
                sub_id = f"SeaMiniVpn-{tg_id}-1"
            elif days == 30:
                sub_id = f"SeaMiniVpn-{tg_id}-1"
            elif days == 90:
                sub_id = f"SeaMidiVPN-{tg_id}-1"
            else:
                sub_id = f"SeaVpn-{tg_id}-1"
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            epoch = datetime.fromtimestamp(0, timezone.utc)
            current_time_ms = int((datetime.now(timezone.utc) - epoch).total_seconds() * 1000.0)
            expiry_time_ms = current_time_ms + (86400000 * days)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è addClient API
            payload = {
                "id": 1,  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º inbound_id=1
                "settings": json.dumps({
                    "clients": [
                        {
                            "id": vless_id,
                            "flow": "xtls-rprx-vision",
                            "email": email,
                            "limitIp": 3,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 3 IP
                            "totalGB": 0,  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
                            "expiryTime": expiry_time_ms,
                            "enable": True,
                            "tgId": str(tg_id),
                            "subId": sub_id,
                            "reset": 0
                        }
                    ]
                })
            }
            
            print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: days={days}, expiry_time_ms={expiry_time_ms}, sub_id={sub_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º addClient API
            add_client_url = f"{self.base_url}/panel/api/inbounds/addClient"
            
            response = await self.client.post(
                add_client_url,
                json=payload,
                cookies=self.session_cookies,
                headers={"Content-Type": "application/json", "Accept": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {result}")
                return result
            else:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def get_user_config(self, email: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.ensure_login()
        
        try:
            print(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: {email}")
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbounds
            inbounds = await self.get_inbounds()
            if not inbounds or not inbounds.get("obj"):
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbounds")
                return None
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ inbounds: {len(inbounds['obj'])}")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ inbounds
            for inbound in inbounds["obj"]:
                import json
                settings = json.loads(inbound["settings"])
                
                if "clients" in settings:
                    for client in settings["clients"]:
                        if client.get("email") == email:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ subId (–ø–æ–¥–ø–∏—Å–æ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞)
                            sub_id = client.get("subId", "")
                            if sub_id:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–æ—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                                subscription_url = f"https://{XUI_BASE_URL}/sea/{sub_id}"
                                return subscription_url
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç subId, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS —Å—Å—ã–ª–∫—É (fallback)
                                stream_settings = json.loads(inbound["streamSettings"])
                                protocol = inbound.get("protocol", "vless")
                                if protocol == "vless":
                                    reality_settings = stream_settings.get("realitySettings", {})
                                    server_name = reality_settings.get("serverNames", [""])[0]
                                    public_key = reality_settings.get("settings", {}).get("publicKey", "")
                                    short_ids = reality_settings.get("shortIds", [""])
                                    
                                    config = f"vless://{client['id']}@{server_name}:{inbound['port']}?type=tcp&security=reality&sni={server_name}&fp=chrome&pbk={public_key}&sid={short_ids[0]}&spx=%2F#{email}"
                                    return config
            
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    async def sync_subscriptions(self) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å 3xUI"""
        await self.ensure_login()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbounds
            inbounds = await self.get_inbounds()
            if not inbounds or not inbounds.get("obj"):
                return {"success": False, "msg": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbounds"}
            
            active_clients = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º inbounds –∏ —Å–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            for inbound in inbounds["obj"]:
                import json
                settings = json.loads(inbound["settings"])
                
                if "clients" in settings:
                    for client in settings["clients"]:
                        if client.get("enable", True):  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
                            active_clients.append({
                                "email": client.get("email", ""),
                                "id": client.get("id", ""),
                                "subId": client.get("subId", ""),
                                "inbound_id": inbound["id"],
                                "inbound_port": inbound.get("port", 0)
                            })
            
            return {
                "success": True,
                "active_clients": active_clients,
                "total_clients": len(active_clients)
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return {"success": False, "msg": str(e)}
    
    async def delete_user(self, email: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ 3xUI"""
        await self.ensure_login()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbounds
            inbounds = await self.get_inbounds()
            if not inbounds or not inbounds.get("obj"):
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbounds")
                return False
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ inbounds
            for inbound in inbounds["obj"]:
                import json
                settings = json.loads(inbound["settings"])
                
                if "clients" in settings:
                    for i, client in enumerate(settings["clients"]):
                        if client.get("email") == email:
                            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                            settings["clients"].pop(i)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º inbound
                            update_url = f"{self.base_url}/panel/api/inbounds/update/{inbound['id']}"
                            update_data = {
                                "id": inbound["id"],
                                "settings": json.dumps(settings)
                            }
                            
                            response = await self.client.post(
                                update_url,
                                json=update_data,
                                cookies=self.session_cookies,
                                headers={"Content-Type": "application/json"}
                            )
                            
                            if response.status_code == 200:
                                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                                return True
                            else:
                                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
                                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                                return False
            
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.aclose()
