#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–¥–ø–∏—Å–æ–∫
"""

import asyncio
from datetime import datetime
from database import SessionLocal, User, Subscription
from xui_client import XUIClient

async def cleanup_database():
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 3xUI
    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 3xUI...")
    xui_client = XUIClient()
    await xui_client.login()
    inbounds = await xui_client.get_inbounds()
    
    active_emails = set()
    if inbounds and inbounds.get('obj'):
        for inbound in inbounds['obj']:
            if 'clientStats' in inbound:
                for client_stat in inbound['clientStats']:
                    if client_stat.get('enable'):
                        email = client_stat.get('email')
                        if email:
                            active_emails.add(email)
                            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {email}")
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(active_emails)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 3xUI")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        
        for user in users:
            print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.email})")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriptions = db.query(Subscription).filter(Subscription.user_id == user.id).all()
            print(f"   –ü–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î: {len(subscriptions)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –≤ 3xUI
            if user.email in active_emails:
                print(f"   ‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ 3xUI")
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å–∞–º—É—é –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                if len(subscriptions) > 1:
                    print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é")
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
                    sorted_subs = sorted(subscriptions, key=lambda x: x.created_at, reverse=True)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å–∞–º–æ–π –Ω–æ–≤–æ–π
                    for sub in sorted_subs[1:]:
                        print(f"   üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É ID: {sub.id} (—Å–æ–∑–¥–∞–Ω–∞: {sub.created_at})")
                        db.delete(sub)
                    
                    db.commit()
                    print(f"   ‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ID: {sorted_subs[0].id}")
            else:
                print(f"   ‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ 3xUI")
                
                # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ 3xUI, –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ
                for sub in subscriptions:
                    if sub.status == "active":
                        print(f"   üîÑ –ü–æ–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É ID: {sub.id} –∫–∞–∫ –∏—Å—Ç–µ–∫—à—É—é")
                        sub.status = "expired"
                
                db.commit()
        
        print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    finally:
        db.close()

if __name__ == "__main__":
    asyncio.run(cleanup_database())
