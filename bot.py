import asyncio
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, Contact, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json


from config import BOT_TOKEN, TARIFFS, REFERRAL_BONUS, BONUS_TO_SUBSCRIPTION, SUPPORT_BOT, ADMIN_IDS
from database import SessionLocal, User, Subscription, Admin, AdminSettings, Payment, generate_referral_code, get_user_by_referral_code, check_telegram_id_exists, check_email_exists
from xui_client import XUIClient
from yookassa_client import YooKassaClient
from notifications import NotificationManager, run_notification_scheduler

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_contact = State()
    waiting_for_name = State()
    waiting_for_email = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–ª–∏–µ–Ω—Ç 3xUI
xui_client = XUIClient()

# –ö–ª–∏–µ–Ω—Ç –ÆKassa
yookassa_client = YooKassaClient()

# –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_contact_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º ‚òéÔ∏è", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_main_menu_keyboard(is_admin=False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard_buttons = [
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üîë –ú–æ–∏ –∫–ª—é—á–∏")],
        [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –∫–ª—é—á"), KeyboardButton(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin:
        keyboard_buttons.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True
    )
    return keyboard

def get_tariffs_keyboard(is_admin=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    keyboard_buttons = [
        [KeyboardButton(text=f"1 –º–µ—Å—è—Ü - {TARIFFS['1m']['price']}‚ÇΩ")],
        [KeyboardButton(text=f"3 –º–µ—Å—è—Ü–∞ - {TARIFFS['3m']['price']}‚ÇΩ")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin:
        keyboard_buttons.insert(2, [KeyboardButton(text="–ö—É–ø–∏—Ç—å —Ç–µ—Å—Ç (1 –¥–µ–Ω—å)")])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True
    )
    return keyboard



# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
async def get_user(telegram_id: int) -> User:
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        return user
    finally:
        db.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(telegram_id: int) -> bool:
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if telegram_id in ADMIN_IDS:
        return True
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        admin = db.query(Admin).filter(
            Admin.telegram_id == telegram_id,
            Admin.is_active == True
        ).first()
        return admin is not None
    finally:
        db.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á–µ—Ç–æ–º –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç—É—Å–∞
def get_user_keyboard(telegram_id: int):
    return get_main_menu_keyboard(is_admin=is_admin(telegram_id))

def get_admin_notifications_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å", callback_data="notifications_on"),
            InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="notifications_off")
        ],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="notifications_status")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_subscription_extend_keyboard(subscription_id: int, user_bonus_coins: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞ 1 —Ä—É–±–ª—å
    keyboard_buttons.append([
        InlineKeyboardButton(
            text=f"üß™ –ü—Ä–æ–¥–ª–∏—Ç—å —Ç–µ—Å—Ç ({TARIFFS['test']['price']}‚ÇΩ)",
            callback_data=f"extend_paid_{subscription_id}_test"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ 1 –º–µ—Å—è—Ü –∑–∞ –¥–µ–Ω—å–≥–∏
    keyboard_buttons.append([
        InlineKeyboardButton(
            text=f"üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü ({TARIFFS['1m']['price']}‚ÇΩ)",
            callback_data=f"extend_paid_{subscription_id}_1m"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –∑–∞ –¥–µ–Ω—å–≥–∏
    keyboard_buttons.append([
        InlineKeyboardButton(
            text=f"üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ ({TARIFFS['3m']['price']}‚ÇΩ)",
            callback_data=f"extend_paid_{subscription_id}_3m"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞ –±–æ–Ω—É—Å—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç)
    if user_bonus_coins >= BONUS_TO_SUBSCRIPTION:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üíé –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü ({BONUS_TO_SUBSCRIPTION} –º–æ–Ω–µ—Ç)",
                callback_data=f"extend_bonus_{subscription_id}_1m"
            )
        ])
    
    if user_bonus_coins >= BONUS_TO_SUBSCRIPTION * 3:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üíé –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ ({BONUS_TO_SUBSCRIPTION * 3} –º–æ–Ω–µ—Ç)",
                callback_data=f"extend_bonus_{subscription_id}_3m"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def get_admin_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    db = SessionLocal()
    try:
        settings = db.query(AdminSettings).first()
        if not settings:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings = AdminSettings()
            db.add(settings)
            db.commit()
        return settings
    finally:
        db.close()

def update_admin_settings(notifications_enabled=None, new_user_notifications=None, subscription_notifications=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    db = SessionLocal()
    try:
        settings = db.query(AdminSettings).first()
        if not settings:
            settings = AdminSettings()
            db.add(settings)
        
        if notifications_enabled is not None:
            settings.notifications_enabled = notifications_enabled
        if new_user_notifications is not None:
            settings.new_user_notifications = new_user_notifications
        if subscription_notifications is not None:
            settings.subscription_notifications = subscription_notifications
        
        db.commit()
        return settings
    finally:
        db.close()

async def send_admin_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    settings = get_admin_settings()
    if not settings.notifications_enabled:
        return
    
    db = SessionLocal()
    try:
        admins = db.query(Admin).filter(Admin.is_active == True).all()
        for admin in admins:
            try:
                await bot.send_message(admin.telegram_id, message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
    finally:
        db.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async def save_user(telegram_id: int, phone: str, full_name: str, email: str = None, referral_code: str = None) -> User:
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å Telegram ID
        if check_telegram_id_exists(telegram_id):
            raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
        if email and check_email_exists(email):
            raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        user_referral_code = generate_referral_code()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        referred_by = None
        if referral_code:
            referrer = get_user_by_referral_code(referral_code)
            if referrer:
                referred_by = referrer.id
        
        user = User(
            telegram_id=telegram_id,
            phone=phone,
            email=email,
            full_name=full_name,
            referral_code=user_referral_code,
            referred_by=referred_by
        )
        db.add(user)
        db.commit()
        db.refresh(user)
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ, –∞ –Ω–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        
        return user
    except ValueError as e:
        db.rollback()
        raise e
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await state.clear()
    
    user = await get_user(message.from_user.id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(is_admin=is_admin(user.telegram_id))
        )
    else:
        # –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ
        referral_code = None
        if len(message.text.split()) > 1:
            referral_code = message.text.split()[1]
        
        await state.set_state(RegistrationStates.waiting_for_contact)
        await state.update_data(referral_code=referral_code)
        
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ\n\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        
        await message.answer(
            welcome_text,
            reply_markup=get_contact_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(RegistrationStates.waiting_for_contact, F.contact)
async def contact_handler(message: Message, state: FSMContext):
    contact: Contact = message.contact
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if contact.user_id != message.from_user.id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(phone=contact.phone_number)
    await state.set_state(RegistrationStates.waiting_for_name)
    
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(RegistrationStates.waiting_for_name)
async def name_handler(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="/start")]], resize_keyboard=True))
        return
    
    full_name = message.text.strip()
    
    if len(full_name) < 2:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    phone = data.get("phone")
    referral_code = data.get("referral_code")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É email
    await state.update_data(full_name=full_name)
    await state.set_state(RegistrationStates.waiting_for_email)
    
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email
@dp.message(RegistrationStates.waiting_for_email)
async def email_handler(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="/start")]], resize_keyboard=True))
        return
    
    email = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if "@" not in email or "." not in email:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
    if check_email_exists(email):
        await message.answer("–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    phone = data.get("phone")
    full_name = data.get("full_name")
    referral_code = data.get("referral_code")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = await save_user(message.from_user.id, phone, full_name, email, referral_code)
        
        await state.clear()
        
        await message.answer(
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        settings = get_admin_settings()
        if settings.notifications_enabled and settings.new_user_notifications:
            notification_text = (
                f"üÜï **–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!**\n\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üÜî Telegram ID: {message.from_user.id}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìß Email: {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: {user.bonus_coins}\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            await send_admin_notification(notification_text)
    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="/start")]], resize_keyboard=True)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text.in_(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üîë –ú–æ–∏ –∫–ª—é—á–∏", "üí≥ –ö—É–ø–∏—Ç—å –∫–ª—é—á", "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "‚ùì –ü–æ–º–æ—â—å", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]))
async def main_menu_handler(message: Message):
    user = await get_user(message.from_user.id)
    
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    if message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        db = SessionLocal()
        try:
            active_subscription = db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.status == "active"
            ).first()
            
            subscription_info = ""
            if active_subscription:
                expires = active_subscription.expires_at.strftime("%d.%m.%Y")
                subscription_info = f"\n–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expires}"
            else:
                subscription_info = "\n–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–µ—Ç"
                
        finally:
            db.close()
        
        await message.answer(
            f"üìã –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–ò–º—è: {user.full_name}\n"
            f"Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n"
            f"–ë–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: {user.bonus_coins} ü™ô"
            f"{subscription_info}",
            reply_markup=get_user_keyboard(message.from_user.id)
        )
    
    elif message.text == "üîë –ú–æ–∏ –∫–ª—é—á–∏":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ)
            current_time = datetime.utcnow()
            active_subscriptions = db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.status == "active",
                Subscription.expires_at > current_time
            ).order_by(Subscription.subscription_number).all()
            
            if active_subscriptions:
                configs_found = 0
                
                for subscription in active_subscriptions:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ 3xUI –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É email
                    unique_email = f"SeaMiniVpn-{user.telegram_id}-{subscription.subscription_number}"
                    try:
                        config = await xui_client.get_user_config(unique_email, subscription.subscription_number)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                        config = None
                    
                    if config:
                        configs_found += 1
                        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                        time_left = subscription.expires_at - current_time
                        days_left = time_left.days
                        hours_left = time_left.seconds // 3600
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
                        key_message = f"**–ü–æ–¥–ø–∏—Å–∫–∞ #{subscription.subscription_number}**\n"
                        key_message += f"–¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
                        key_message += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
                        
                        if days_left <= 0 and hours_left <= 0:
                            key_message += f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!\n"
                        elif days_left <= 0:
                            key_message += f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {hours_left} —á–∞—Å–æ–≤!\n"
                        elif days_left <= 3:
                            key_message += f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!\n"
                        elif days_left <= 7:
                            key_message += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π\n"
                        else:
                            key_message += f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n"
                        
                        key_message += f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n`{config}`\n"
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                        extend_keyboard = get_subscription_extend_keyboard(subscription.id, user.bonus_coins)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                        await message.answer(
                            key_message,
                            parse_mode="Markdown",
                            reply_markup=extend_keyboard
                        )
                
                if configs_found > 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    await message.answer(
                        "üîë –í–∞—à–∏ –∫–ª—é—á–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
                        reply_markup=get_user_keyboard(message.from_user.id)
                    )
                else:
                    await message.answer(
                        "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.",
                        reply_markup=get_user_keyboard(message.from_user.id)
                    )
            else:
                await message.answer(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.",
                    reply_markup=get_user_keyboard(message.from_user.id)
                )
        finally:
            db.close()
    
    elif message.text == "üí≥ –ö—É–ø–∏—Ç—å –∫–ª—é—á":
        await message.answer(
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:\n\n"
            f"‚Ä¢ 1 –º–µ—Å—è—Ü - {TARIFFS['1m']['price']}‚ÇΩ\n"
            f"‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - {TARIFFS['3m']['price']}‚ÇΩ",
            reply_markup=get_tariffs_keyboard(is_admin(message.from_user.id))
        )
    
    elif message.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        db = SessionLocal()
        try:
            referrals_count = db.query(User).filter(User.referred_by == user.id).count()
            
            # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
            bot_info = await bot.get_me()
            bot_username = bot_info.username
            
            referral_text = f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
            referral_text += f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: `{user.referral_code}`\n"
            referral_text += f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`https://t.me/{bot_username}?start={user.referral_code}`\n\n"
            referral_text += f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {referrals_count}\n"
            referral_text += f"–ë–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç: {user.bonus_coins} ü™ô\n\n"
            referral_text += f"üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {REFERRAL_BONUS} –º–æ–Ω–µ—Ç\n"
            referral_text += f"üíé {BONUS_TO_SUBSCRIPTION} –º–æ–Ω–µ—Ç = 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏\n"
            referral_text += f"üíé {BONUS_TO_SUBSCRIPTION * 3} –º–æ–Ω–µ—Ç = 3 –º–µ—Å—è—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤
            keyboard_buttons = []
            
            if user.bonus_coins >= BONUS_TO_SUBSCRIPTION * 3:
                keyboard_buttons.append([KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å 3 –º–µ—Å—è—Ü–∞ –∑–∞ 450 –º–æ–Ω–µ—Ç")])
                keyboard_buttons.append([KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å 1 –º–µ—Å—è—Ü –∑–∞ 150 –º–æ–Ω–µ—Ç")])
            elif user.bonus_coins >= BONUS_TO_SUBSCRIPTION:
                keyboard_buttons.append([KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å 1 –º–µ—Å—è—Ü –∑–∞ 150 –º–æ–Ω–µ—Ç")])
            else:
                referral_text += f"üìà –î–æ –æ–±–º–µ–Ω–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {BONUS_TO_SUBSCRIPTION - user.bonus_coins} –º–æ–Ω–µ—Ç"
            
            keyboard_buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])
            
            keyboard = ReplyKeyboardMarkup(
                keyboard=keyboard_buttons,
                resize_keyboard=True
            )
            
            await message.answer(
                referral_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        finally:
            db.close()
    
    elif message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not is_admin(message.from_user.id):
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                reply_markup=get_user_keyboard(message.from_user.id)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        db = SessionLocal()
        try:
            total_users = db.query(User).count()
            active_subscriptions = db.query(Subscription).filter(Subscription.status == "active").count()
            expired_subscriptions = db.query(Subscription).filter(Subscription.status == "expired").count()
            paused_subscriptions = db.query(Subscription).filter(Subscription.status == "paused").count()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
            admin = db.query(Admin).filter(Admin.telegram_id == message.from_user.id).first()
            admin_role = "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω" if admin and admin.is_superadmin else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            
            admin_text = f"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
            admin_text += f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {admin_role}\n\n"
            admin_text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            admin_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            admin_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
            admin_text += f"‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {paused_subscriptions}\n"
            admin_text += f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {expired_subscriptions}\n\n"
            admin_text += f"üåê **–í–µ–±-–ø–∞–Ω–µ–ª—å:**\n"
            admin_text += f"‚Ä¢ URL: https://admin.universaltools.pro\n"
            admin_text += f"‚Ä¢ –õ–æ–≥–∏–Ω: {admin.username if admin else 'Admin'}\n"
            admin_text += f"‚Ä¢ –ü–∞—Ä–æ–ª—å: (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)\n\n"
            admin_text += f"üí° **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ–±-–ø–∞–Ω–µ–ª–∏:**\n"
            admin_text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
            admin_text += f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
            admin_text += f"‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å 3xUI\n"
            admin_text += f"‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
            admin_text += f"üîî **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:**\n"
            admin_text += f"‚Ä¢ /notifications_on - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            admin_text += f"‚Ä¢ /notifications_off - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            admin_text += f"‚Ä¢ /notifications_status - —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            admin_text += f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
            
            await message.answer(
                admin_text,
                reply_markup=get_user_keyboard(message.from_user.id)
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            await message.answer(
                "üîî **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:**",
                reply_markup=get_admin_notifications_keyboard()
            )
        finally:
            db.close()
    
    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        help_text = "‚ùì –ü–æ–º–æ—â—å\n\n"
        help_text += f"‚Ä¢ –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: <a href=\"https://t.me/SeaVPN_support_bot\">@SeaVPN_support_bot</a>\n"
        help_text += "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: 24/7\n\n"
        help_text += "üì± –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN:\n\n"
        help_text += "<b>–î–ª—è Android:</b>\n"
        help_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.v2ray.ang\">V2rayNG</a>\n"
        help_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.github.kr328.clash\">Clash for Android</a>\n\n"
        help_text += "<b>–î–ª—è iPhone:</b>\n"
        help_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/streisand/id6450534064\">Streisand</a>\n"
        help_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/shadowrocket/id932747118\">Shadowrocket</a>\n\n"
        help_text += "<b>–î–ª—è Windows:</b>\n"
        help_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">Hiddify</a>\n"
        help_text += "‚Ä¢ <a href=\"https://github.com/2dust/v2rayN/releases\">V2rayN</a>\n\n"
        help_text += "<b>–î–ª—è Mac:</b>\n"
        help_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">FoxRay</a>\n"
        help_text += "‚Ä¢ <a href=\"https://github.com/yichengchen/clashX/releases\">ClashX</a>\n\n"
        help_text += "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:</b>\n"
        help_text += "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n"
        help_text += "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–æ—á–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 'üîë –ú–æ–∏ –∫–ª—é—á–∏'\n"
        help_text += "3. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        help_text += "4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'\n\n"
        help_text += "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
        
        await message.answer(
            help_text,
            parse_mode="HTML",
            reply_markup=get_user_keyboard(message.from_user.id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
@dp.message(F.text.contains("–º–µ—Å—è—Ü") | F.text.contains("–ö—É–ø–∏—Ç—å —Ç–µ—Å—Ç"))
async def tariff_handler(message: Message):
    user = await get_user(message.from_user.id)
    
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    if "1 –º–µ—Å—è—Ü" in message.text:
        tariff = "1m"
        price = TARIFFS["1m"]["price"]
        days = TARIFFS["1m"]["days"]
    elif "3 –º–µ—Å—è—Ü–∞" in message.text:
        tariff = "3m"
        price = TARIFFS["3m"]["price"]
        days = TARIFFS["3m"]["days"]
    elif "–ö—É–ø–∏—Ç—å —Ç–µ—Å—Ç" in message.text:
        tariff = "test"
        price = TARIFFS["test"]["price"]
        days = TARIFFS["test"]["days"]
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_tariffs_keyboard(is_admin(message.from_user.id)))
        return
    
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_keyboard(message.from_user.id))
        return
    
    # –î–ª—è –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–π) - —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
    await create_payment_for_tariff(message, user, tariff, price, days)

async def create_test_subscription(message: Message, user):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_email = user.email if user.email else f"user_{user.telegram_id}@vpn.local"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
        db = SessionLocal()
        try:
            existing_subscriptions = db.query(Subscription).filter(
                Subscription.user_id == user.id
            ).all()
            next_subscription_number = max([s.subscription_number for s in existing_subscriptions], default=0) + 1
        finally:
            db.close()
            
        xui_result = await xui_client.create_user(
            user_email, 
            1,  # 1 –¥–µ–Ω—å
            f"{user.full_name} (TEST)", 
            str(user.telegram_id), 
            next_subscription_number
        )
        
        if xui_result:
            config = await xui_client.get_user_config(xui_result["email"], next_subscription_number)
            
            if not config:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard(is_admin(message.from_user.id)))
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
            db = SessionLocal()
            try:
                expires_at = datetime.utcnow() + timedelta(days=1)
                
                subscription = Subscription(
                    user_id=user.id,
                    plan="test",
                    plan_name="–¢–µ—Å—Ç–æ–≤—ã–π (1 –¥–µ–Ω—å)",
                    status="active",
                    subscription_number=next_subscription_number,
                    expires_at=expires_at
                )
                db.add(subscription)
                db.commit()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                apps_text = "\nüì± <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
                apps_text += "<b>Android:</b>\n"
                apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.v2ray.ang\">V2rayNG</a>\n"
                apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.github.kr328.clash\">Clash for Android</a>\n\n"
                apps_text += "<b>iPhone:</b>\n"
                apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/streisand/id6450534064\">Streisand</a>\n"
                apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/shadowrocket/id932747118\">Shadowrocket</a>\n\n"
                apps_text += "<b>Windows:</b>\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                success_message = f"‚úÖ <b>–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                success_message += f"üìã <b>–¢–∞—Ä–∏—Ñ:</b> –¢–µ—Å—Ç–æ–≤—ã–π (1 –¥–µ–Ω—å)\n"
                success_message += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                success_message += f"‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                success_message += f"üîó <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
                success_message += f"<code>{config['subscription_url']}</code>\n\n"
                success_message += apps_text
                
                await message.answer(success_message, parse_mode="HTML", reply_markup=get_main_menu_keyboard(is_admin(message.from_user.id)))
                
            finally:
                db.close()
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 3xUI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard(is_admin(message.from_user.id)))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard(is_admin(message.from_user.id)))

async def create_payment_for_tariff(message: Message, user, tariff: str, price: int, days: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        description = f"SeaVPN - {TARIFFS[tariff]['name']}"
        
        payment_result = yookassa_client.create_payment(
            amount=price,
            description=description,
            user_id=user.id,
            subscription_type=tariff,
            payment_type="new"
        )
        
        if payment_result["success"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
            db = SessionLocal()
            try:
                payment = Payment(
                    user_id=user.id,
                    provider="yookassa",
                    invoice_id=payment_result["payment_id"],
                    amount=price,
                    currency="RUB",
                    status="pending",
                    payment_method="yookassa",
                    yookassa_payment_id=payment_result["payment_id"],
                    subscription_type=tariff,
                    description=description
                )
                db.add(payment)
                db.commit()
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result["confirmation_url"])],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment_result['payment_id']}")]
                ])
                
                payment_message = f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                payment_message += f"üìã <b>–¢–∞—Ä–∏—Ñ:</b> {TARIFFS[tariff]['name']}\n"
                payment_message += f"üí∞ <b>–°—É–º–º–∞:</b> {price}‚ÇΩ\n"
                payment_message += f"‚è∞ <b>–°—Ä–æ–∫:</b> {days} –¥–Ω–µ–π\n\n"
                payment_message += f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
                payment_message += f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –Ω–∏–∂–µ\n\n"
                payment_message += f"‚úÖ <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>"
                
                await message.answer(payment_message, parse_mode="HTML", reply_markup=keyboard)
                
            finally:
                db.close()
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=get_main_menu_keyboard(is_admin(message.from_user.id)))
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard(is_admin(message.from_user.id)))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å 3xUI
@dp.message(F.text == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å 3xUI")
async def sync_handler(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å 3xUI...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = SessionLocal()
        try:
            active_subscriptions = db.query(Subscription).filter(
                Subscription.user_id == user.id,
                Subscription.status == "active",
                Subscription.expires_at > datetime.utcnow()
            ).order_by(Subscription.subscription_number).all()
        finally:
            db.close()
        
        if not active_subscriptions:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º email
        message_text = "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        any_found = False
        for subscription in active_subscriptions:
            unique_email = f"SeaMiniVpn-{user.telegram_id}-{subscription.subscription_number}"
            config = await xui_client.get_user_config(unique_email, subscription.subscription_number)
            if config:
                any_found = True
                days_left = (subscription.expires_at - datetime.utcnow()).days
                message_text += f"**–ü–æ–¥–ø–∏—Å–∫–∞ #{subscription.subscription_number}**\n"
                message_text += f"–¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
                message_text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
                if days_left <= 0:
                    message_text += "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n"
                elif days_left <= 3:
                    message_text += f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!\n"
                elif days_left <= 7:
                    message_text += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π\n"
                else:
                    message_text += "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n"
                message_text += f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n`{config}`\n\n"
        
        if any_found:
            await message.answer(
                message_text,
                parse_mode="Markdown",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_main_menu_keyboard()
            )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}",
            reply_markup=get_main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–º–µ–Ω–∞ –º–æ–Ω–µ—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
@dp.message(F.text.in_(["üí≥ –ö—É–ø–∏—Ç—å 1 –º–µ—Å—è—Ü –∑–∞ 150 –º–æ–Ω–µ—Ç", "üí≥ –ö—É–ø–∏—Ç—å 3 –º–µ—Å—è—Ü–∞ –∑–∞ 450 –º–æ–Ω–µ—Ç"]))
async def exchange_bonus_handler(message: Message):
    user = await get_user(message.from_user.id)
    
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if message.text == "üí≥ –ö—É–ø–∏—Ç—å 1 –º–µ—Å—è—Ü –∑–∞ 150 –º–æ–Ω–µ—Ç":
        required_coins = BONUS_TO_SUBSCRIPTION
        months = 1
        tariff_name = "1 –º–µ—Å—è—Ü (–∑–∞ –±–æ–Ω—É—Å—ã)"
    elif message.text == "üí≥ –ö—É–ø–∏—Ç—å 3 –º–µ—Å—è—Ü–∞ –∑–∞ 450 –º–æ–Ω–µ—Ç":
        required_coins = BONUS_TO_SUBSCRIPTION * 3
        months = 3
        tariff_name = "3 –º–µ—Å—è—Ü–∞ (–∑–∞ –±–æ–Ω—É—Å—ã)"
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", reply_markup=get_main_menu_keyboard())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
    if user.bonus_coins < required_coins:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞.\n\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {required_coins} –º–æ–Ω–µ—Ç\n"
            f"–£ –≤–∞—Å: {user.bonus_coins} –º–æ–Ω–µ—Ç\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤!",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 3xUI
    try:
        user_email = user.email if user.email else f"user_{user.telegram_id}@vpn.local"
        days = months * 30
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = SessionLocal()
        try:
            existing_subscriptions = db.query(Subscription).filter(
                Subscription.user_id == user.id
            ).all()
            next_subscription_number = max([s.subscription_number for s in existing_subscriptions], default=0) + 1
        finally:
            db.close()
            
        xui_result = await xui_client.create_user(
            user_email, 
            days, 
            f"{user.full_name} (BONUS)", 
            str(user.telegram_id), 
            next_subscription_number
        )
        
        if xui_result:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            if xui_result.get("existing"):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = await xui_client.get_user_config(xui_result["email"], next_subscription_number)
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                config = await xui_client.get_user_config(xui_result["email"], next_subscription_number)
            
            if config:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
                db = SessionLocal()
                try:
                    
                    subscription = Subscription(
                        user_id=user.id,
                        plan="bonus",
                        plan_name=tariff_name,
                        status="active",
                        subscription_number=next_subscription_number,
                        expires_at=datetime.utcnow() + timedelta(days=days)
                    )
                    db.add(subscription)
                    
                    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
                    user.bonus_coins -= required_coins
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    db.merge(user)
                    db.commit()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç user –≤ –ø–∞–º—è—Ç–∏
                    user = db.query(User).filter(User.id == user.id).first()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    apps_text = "\nüì± <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
                    apps_text += "<b>Android:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.v2ray.ang\">V2rayNG</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.github.kr328.clash\">Clash for Android</a>\n\n"
                    apps_text += "<b>iPhone:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/streisand/id6450534064\">Streisand</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/shadowrocket/id932747118\">Shadowrocket</a>\n\n"
                    apps_text += "<b>Windows:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">Hiddify</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/2dust/v2rayN/releases\">V2rayN</a>\n\n"
                    apps_text += "<b>Mac:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">FoxRay</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/yichengchen/clashX/releases\">ClashX</a>\n\n"
                    
                    await message.answer(
                        f"‚úÖ –ë–æ–Ω—É—Å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                        f"–¢–∞—Ä–∏—Ñ: {tariff_name}\n"
                        f"–°–ø–∏—Å–∞–Ω–æ –º–æ–Ω–µ—Ç: {required_coins} ü™ô\n"
                        f"–û—Å—Ç–∞—Ç–æ–∫ –º–æ–Ω–µ—Ç: {user.bonus_coins} ü™ô\n"
                        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
                        f"–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n<code>{config}</code>\n\n"
                        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –≤–∞—à VPN –∫–ª–∏–µ–Ω—Ç."
                        f"{apps_text}",
                        parse_mode="HTML",
                        reply_markup=get_user_keyboard(message.from_user.id)
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –±–æ–Ω—É—Å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
                    settings = get_admin_settings()
                    if settings.notifications_enabled and settings.subscription_notifications:
                        notification_text = (
                            f"üéÅ **–ë–æ–Ω—É—Å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
                            f"üÜî Telegram ID: {user.telegram_id}\n"
                            f"üìß Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                            f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff_name}\n"
                            f"ü™ô –°–ø–∏—Å–∞–Ω–æ –º–æ–Ω–µ—Ç: {required_coins} ü™ô\n"
                            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {required_coins} –º–æ–Ω–µ—Ç\n"
                            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
                            f"üïê –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                        )
                        await send_admin_notification(notification_text)
                finally:
                    db.close()
            else:
                await message.answer(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_main_menu_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –±–æ–Ω—É—Å–æ–≤: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –±–æ–Ω—É—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_handler(message: Message):
    user = await get_user(message.from_user.id)
    
    if user:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_handler(message: Message):
    user = await get_user(message.from_user.id)
    
    if user:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ù–∞–∂–º–∏—Ç–µ /start"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query(lambda c: c.data.startswith('notifications_'))
async def notifications_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    action = callback.data.split('_')[1]
    
    if action == "on":
        settings = update_admin_settings(notifications_enabled=True)
        await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
        await callback.message.edit_text(
            "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "‚Ä¢ –ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –ü–æ–∫—É–ø–∫–∞—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
            reply_markup=get_admin_notifications_keyboard()
        )
    
    elif action == "off":
        settings = update_admin_settings(notifications_enabled=False)
        await callback.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
        await callback.message.edit_text(
            "üîï **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!**\n\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –ø–æ–∫—É–ø–∫–∞—Ö.",
            reply_markup=get_admin_notifications_keyboard()
        )
    
    elif action == "status":
        settings = get_admin_settings()
        status_text = "üîî **–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n\n"
        
        if settings.notifications_enabled:
            status_text += "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n"
            status_text += f"üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {'‚úÖ' if settings.new_user_notifications else '‚ùå'}\n"
            status_text += f"üí≥ –ü–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {'‚úÖ' if settings.subscription_notifications else '‚ùå'}\n"
        else:
            status_text += "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
        
        status_text += f"\nüïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {settings.created_at.strftime('%d.%m.%Y %H:%M') if settings.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        
        await callback.answer("üìä –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω!")
        await callback.message.edit_text(
            status_text,
            reply_markup=get_admin_notifications_keyboard()
        )
    
    elif action == "back":
        await callback.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
@dp.message(F.text == "/notifications_on")
async def notifications_on_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    settings = update_admin_settings(notifications_enabled=True)
    await message.answer(
        "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
        "‚Ä¢ –ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∫–∞—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
        reply_markup=get_user_keyboard(message.from_user.id)
    )

@dp.message(F.text == "/notifications_off")
async def notifications_off_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    settings = update_admin_settings(notifications_enabled=False)
    await message.answer(
        "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!\n\n"
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –ø–æ–∫—É–ø–∫–∞—Ö.",
        reply_markup=get_user_keyboard(message.from_user.id)
    )

@dp.message(F.text == "/notifications_status")
async def notifications_status_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    settings = get_admin_settings()
    status_text = "üîî **–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n\n"
    
    if settings.notifications_enabled:
        status_text += "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n"
        status_text += f"üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {'‚úÖ' if settings.new_user_notifications else '‚ùå'}\n"
        status_text += f"üí≥ –ü–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {'‚úÖ' if settings.subscription_notifications else '‚ùå'}\n"
    else:
        status_text += "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
    
    status_text += f"\nüïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {settings.created_at.strftime('%d.%m.%Y %H:%M') if settings.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    
    await message.answer(
        status_text,
        parse_mode="Markdown",
        reply_markup=get_user_keyboard(message.from_user.id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö)
@dp.message(RegistrationStates.waiting_for_contact)
async def registration_contact_handler(message: Message, state: FSMContext):
    if message.text == "/start":
        await start_handler(message, state)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=get_contact_keyboard()
        )

@dp.message(RegistrationStates.waiting_for_name)
async def registration_name_handler(message: Message, state: FSMContext):
    if message.text == "/start":
        await start_handler(message, state)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )

@dp.message(RegistrationStates.waiting_for_email)
async def registration_email_handler(message: Message, state: FSMContext):
    if message.text == "/start":
        await start_handler(message, state)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(lambda c: c.data.startswith('extend_'))
async def extend_subscription_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = callback.data.split('_')
        if len(parts) < 4:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥–ª–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ–µ –∏–ª–∏ –∑–∞ –±–æ–Ω—É—Å—ã)
        if parts[1] == "bonus":
            is_bonus = True
            subscription_id = int(parts[2])
            tariff = parts[3]  # 1m –∏–ª–∏ 3m
        elif parts[1] == "paid":
            is_bonus = False
            subscription_id = int(parts[2])
            tariff = parts[3]  # 1m –∏–ª–∏ 3m
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
            return
        
        user = await get_user(callback.from_user.id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        db = SessionLocal()
        try:
            subscription = db.query(Subscription).filter(Subscription.id == subscription_id).first()
            if not subscription or subscription.user_id != user.id:
                await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            if tariff == "test":
                days = 1
                if is_bonus:
                    required_coins = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                    tariff_name = "–¢–µ—Å—Ç (1 –¥–µ–Ω—å) (–±–æ–Ω—É—Å–Ω–∞—è)"
                else:
                    price = TARIFFS['test']['price']
                    tariff_name = "–¢–µ—Å—Ç (1 –¥–µ–Ω—å)"
            elif tariff == "1m":
                days = 30
                if is_bonus:
                    required_coins = 150
                    tariff_name = "1 –º–µ—Å—è—Ü (–±–æ–Ω—É—Å–Ω–∞—è)"
                else:
                    price = TARIFFS['1m']['price']
                    tariff_name = "1 –º–µ—Å—è—Ü"
            elif tariff == "3m":
                days = 90
                if is_bonus:
                    required_coins = 450
                    tariff_name = "3 –º–µ—Å—è—Ü–∞ (–±–æ–Ω—É—Å–Ω–∞—è)"
                else:
                    price = TARIFFS['3m']['price']
                    tariff_name = "3 –º–µ—Å—è—Ü–∞"
            else:
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å—ã –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∑–∞ –±–æ–Ω—É—Å—ã
            if is_bonus:
                if user.bonus_coins < required_coins:
                    await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {required_coins}, —É –≤–∞—Å: {user.bonus_coins}")
                    return
                
                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ –±–æ–Ω—É—Å—ã
                await extend_subscription_with_bonus(callback, user, subscription, tariff, days, required_coins, tariff_name)
            else:
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                await create_payment_for_extension(callback, user, subscription, tariff, price, days, tariff_name)
                
        finally:
            db.close()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏")

async def extend_subscription_with_bonus(callback: CallbackQuery, user, subscription, tariff: str, days: int, required_coins: int, tariff_name: str):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –±–æ–Ω—É—Å—ã"""
    try:
        db = SessionLocal()
        try:
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ 3xUI
            user_email = user.email if user.email else f"user_{user.telegram_id}@vpn.local"
            unique_email = f"SeaMiniVpn-{user.telegram_id}-{subscription.subscription_number}"
            
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if subscription.status == "expired":
                xui_result = await xui_client.create_user(
                    user_email, 
                    days, 
                    f"{user.full_name} (EXTENDED)", 
                    str(user.telegram_id),
                    subscription.subscription_number
                )
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                xui_result = await xui_client.extend_user(
                    unique_email,
                    days
                )
            
            if xui_result:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = await xui_client.get_user_config(xui_result["email"], subscription.subscription_number)
                
                if config:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
                    if subscription.status == "expired":
                        subscription.expires_at = datetime.utcnow() + timedelta(days=days)
                    else:
                        subscription.expires_at = subscription.expires_at + timedelta(days=days)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏–π
                    subscription.extensions_count += 1
                    subscription.last_extension_date = datetime.utcnow()
                    subscription.total_days_added += days
                    subscription.status = "active"
                    
                    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
                    user.bonus_coins -= required_coins
                    db.merge(user)
                    db.commit()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    apps_text = "\nüì± <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
                    apps_text += "<b>Android:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.v2ray.ang\">V2rayNG</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.github.kr328.clash\">Clash for Android</a>\n\n"
                    apps_text += "<b>iPhone:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/streisand/id6450534064\">Streisand</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/shadowrocket/id932747118\">Shadowrocket</a>\n\n"
                    apps_text += "<b>Windows:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">Hiddify</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/2dust/v2rayN/releases\">V2rayN</a>\n\n"
                    apps_text += "<b>Mac:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">FoxRay</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/yichengchen/clashX/releases\">ClashX</a>\n\n"
                    
                    await callback.message.edit_text(
                        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∑–∞ –±–æ–Ω—É—Å—ã!\n\n"
                        f"–¢–∞—Ä–∏—Ñ: {tariff_name}\n"
                        f"–°–ø–∏—Å–∞–Ω–æ –º–æ–Ω–µ—Ç: {required_coins} ü™ô\n"
                        f"–û—Å—Ç–∞—Ç–æ–∫ –º–æ–Ω–µ—Ç: {user.bonus_coins} ü™ô\n"
                        f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n<code>{config}</code>\n\n"
                        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –≤–∞—à VPN –∫–ª–∏–µ–Ω—Ç."
                        f"{apps_text}",
                        parse_mode="HTML"
                    )
                    
                    await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
                
        finally:
            db.close()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –±–æ–Ω—É—Å—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏")

async def create_payment_for_extension(callback: CallbackQuery, user, subscription, tariff: str, price: int, days: int, tariff_name: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        description = f"SeaVPN - –ü—Ä–æ–¥–ª–µ–Ω–∏–µ {tariff_name}"
        
        payment_result = yookassa_client.create_payment(
            amount=price,
            description=description,
            user_id=user.id,
            subscription_type=tariff,
            payment_type="extension",
            subscription_id=subscription.id
        )
        
        if payment_result["success"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            db = SessionLocal()
            try:
                payment = Payment(
                    user_id=user.id,
                    provider="yookassa",
                    invoice_id=payment_result["payment_id"],
                    amount=price,
                    currency="RUB",
                    status="pending",
                    payment_method="yookassa",
                    yookassa_payment_id=payment_result["payment_id"],
                    subscription_type=tariff,
                    description=description,
                    payment_type="extension",  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
                    payment_metadata=json.dumps({"subscription_id": subscription.id})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                )
                db.add(payment)
                db.commit()
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result["confirmation_url"])],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment_result['payment_id']}")]
                ])
                
                payment_message = f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                payment_message += f"üìã <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}\n"
                payment_message += f"üí∞ <b>–°—É–º–º–∞:</b> {price}‚ÇΩ\n"
                payment_message += f"‚è∞ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–Ω–µ–π:</b> {days}\n"
                payment_message += f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                payment_message += f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
                payment_message += f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –Ω–∏–∂–µ\n\n"
                payment_message += f"‚úÖ <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>"
                
                await callback.message.edit_text(payment_message, parse_mode="HTML", reply_markup=keyboard)
                
            finally:
                db.close()
        else:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith('check_payment_'))
async def check_payment_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split('_')[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
        payment_status = yookassa_client.check_payment_status(payment_id)
        
        if not payment_status["success"]:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        if payment_status["paid"]:
            # –ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await process_paid_payment(callback, payment_id, payment_status)
        else:
            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith('cancel_payment_'))
async def cancel_payment_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split('_')[2]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        db = SessionLocal()
        try:
            payment = db.query(Payment).filter(Payment.yookassa_payment_id == payment_id).first()
            if payment:
                payment.status = "canceled"
                db.commit()
                await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            else:
                await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        finally:
            db.close()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def process_paid_payment(callback: CallbackQuery, payment_id: str, payment_status: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î
            payment = db.query(Payment).filter(Payment.yookassa_payment_id == payment_id).first()
            if not payment:
                await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if payment.status == "completed":
                await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.id == payment.user_id).first()
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
            tariff = payment.subscription_type
            if tariff == "test":
                days = TARIFFS["test"]["days"]
                tariff_name = TARIFFS["test"]["name"]
            elif tariff == "1m":
                days = TARIFFS["1m"]["days"]
                tariff_name = TARIFFS["1m"]["name"]
            elif tariff == "3m":
                days = TARIFFS["3m"]["days"]
                tariff_name = TARIFFS["3m"]["name"]
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ 3xUI
            user_email = user.email if user.email else f"user_{user.telegram_id}@vpn.local"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
            existing_subscriptions = db.query(Subscription).filter(Subscription.user_id == user.id).all()
            next_subscription_number = max([s.subscription_number for s in existing_subscriptions], default=0) + 1
            
            xui_result = await xui_client.create_user(
                user_email, 
                days, 
                f"{user.full_name} (PAID)", 
                str(user.telegram_id), 
                next_subscription_number
            )
            
            if xui_result:
                config = await xui_client.get_user_config(xui_result["email"], next_subscription_number)
                
                if config:
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
                    expires_at = datetime.utcnow() + timedelta(days=days)
                    
                    subscription = Subscription(
                        user_id=user.id,
                        plan=tariff,
                        plan_name=tariff_name,
                        status="active",
                        subscription_number=next_subscription_number,
                        expires_at=expires_at
                    )
                    db.add(subscription)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                    payment.status = "completed"
                    payment.completed_at = datetime.utcnow()
                    
                    db.commit()
                    
                    # –°–æ–∑–¥–∞–µ–º —á–µ–∫
                    if user.email:
                        receipt_result = yookassa_client.create_receipt(
                            payment_id, 
                            user.email, 
                            payment.amount, 
                            payment.description
                        )
                        if receipt_result["success"]:
                            payment.receipt_sent = True
                            db.commit()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                    apps_text = "\nüì± <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
                    apps_text += "<b>Android:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.v2ray.ang\">V2rayNG</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://play.google.com/store/apps/details?id=com.github.kr328.clash\">Clash for Android</a>\n\n"
                    apps_text += "<b>iPhone:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/streisand/id6450534064\">Streisand</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://apps.apple.com/app/shadowrocket/id932747118\">Shadowrocket</a>\n\n"
                    apps_text += "<b>Windows:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">Hiddify</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/2dust/v2rayN/releases\">V2rayN</a>\n\n"
                    apps_text += "<b>Mac:</b>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/hiddify/hiddify-next/releases\">FoxRay</a>\n"
                    apps_text += "‚Ä¢ <a href=\"https://github.com/yichengchen/clashX/releases\">ClashX</a>\n\n"
                    
                    success_message = f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    success_message += f"üìã <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}\n"
                    success_message += f"üí∞ <b>–°—É–º–º–∞:</b> {payment.amount}‚ÇΩ\n"
                    success_message += f"‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    success_message += f"üîó <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
                    if isinstance(config, dict) and 'subscription_url' in config:
                        success_message += f"<code>{config['subscription_url']}</code>\n\n"
                    else:
                        success_message += f"<code>{config}</code>\n\n"
                    success_message += apps_text
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.edit_text(success_message, parse_mode="HTML")
                    await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ
                    if user.referred_by and not user.has_made_first_purchase:
                        referrer = db.query(User).filter(User.id == user.referred_by).first()
                        if referrer:
                            referrer.bonus_coins += REFERRAL_BONUS
                            user.has_made_first_purchase = True
                            db.merge(referrer)
                            db.merge(user)
                            db.commit()
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
                            if notification_manager:
                                await notification_manager.notify_referral_bonus(referrer.telegram_id, user.full_name)
                    
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
                
        finally:
            db.close()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    global notification_manager
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(run_notification_scheduler())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    finally:
        await xui_client.close()

if __name__ == "__main__":
    asyncio.run(main())
