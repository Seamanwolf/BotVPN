import asyncio
from datetime import datetime, timedelta
from database import SessionLocal, User, Subscription, AdminSettings
from config import BOT_TOKEN
from aiogram import Bot
import os
import requests

INTERNAL_NOTIFY_URL = os.getenv("INTERNAL_NOTIFY_URL", "http://127.0.0.1:8080/internal/notify")

class NotificationManager:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = True
        asyncio.create_task(self.check_expiring_subscriptions())
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = False
    
    async def check_expiring_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        while self.running:
            try:
                db = SessionLocal()
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
                    three_days_from_now = datetime.utcnow() + timedelta(days=3)
                    expiring_subscriptions = db.query(Subscription).filter(
                        Subscription.status == "active",
                        Subscription.expires_at <= three_days_from_now,
                        Subscription.expires_at > datetime.utcnow()
                    ).all()
                    
                    for subscription in expiring_subscriptions:
                        user = db.query(User).filter(User.id == subscription.user_id).first()
                        if user:
                            await self.send_expiry_notification(user, subscription)
                    
                finally:
                    db.close()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
                await asyncio.sleep(12 * 60 * 60)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ check_expiring_subscriptions: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    async def send_expiry_notification(self, user: User, subscription: Subscription):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            days_left = (subscription.expires_at - datetime.utcnow()).days
            
            if days_left == 0:
                message = f"‚ö†Ô∏è **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!**\n\n"
            elif days_left == 1:
                message = f"‚ö†Ô∏è **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!**\n\n"
            else:
                message = f"‚ö†Ô∏è **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è!**\n\n"
            
            message += f"üì¶ –¢–∞—Ä–∏—Ñ: {subscription.plan_name}\n"
            message += f"üìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard_buttons = []
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            money_row = []
            money_row.append(InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü (149‚ÇΩ)", callback_data=f"extend_1m_{subscription.id}"))
            money_row.append(InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (399‚ÇΩ)", callback_data=f"extend_3m_{subscription.id}"))
            keyboard_buttons.append(money_row)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç (–µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç)
            if user.bonus_coins >= 150:
                bonus_row = []
                if user.bonus_coins >= 150:
                    bonus_row.append(InlineKeyboardButton(text="ü™ô –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü (150 –º–æ–Ω–µ—Ç)", callback_data=f"extend_bonus_1m_{subscription.id}"))
                if user.bonus_coins >= 450:
                    bonus_row.append(InlineKeyboardButton(text="ü™ô –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (450 –º–æ–Ω–µ—Ç)", callback_data=f"extend_bonus_3m_{subscription.id}"))
                if bonus_row:
                    keyboard_buttons.append(bonus_row)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await self.bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: {e}")
    
    async def notify_referral_bonus(self, referrer_id: int, new_user_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ"""
        try:
            from config import REFERRAL_BONUS
            
            message = (
                f"üéÅ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_name} —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"
                f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {REFERRAL_BONUS} –º–æ–Ω–µ—Ç\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'"
            )
            
            await self.bot.send_message(
                chat_id=referrer_id,
                text=message,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ: {e}")
    
    async def notify_coins_added(self, user, coins_amount: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
        try:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            message = f"üéÅ **–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã!**\n\n"
            message += f"üí∞ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {coins_amount} ü™ô\n"
            message += f"üíº **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {user.bonus_coins} ü™ô\n\n"
            message += f"üíé –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            message += f"‚Ä¢ 150 –º–æ–Ω–µ—Ç = 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏\n"
            message += f"‚Ä¢ 450 –º–æ–Ω–µ—Ç = 3 –º–µ—Å—è—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            message += f"‚è∞ **–í—Ä–µ–º—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:** {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            keyboard_buttons = []
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç (–µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç)
            if user.bonus_coins >= 150:
                bonus_row = []
                if user.bonus_coins >= 150:
                    bonus_row.append(InlineKeyboardButton(text="ü™ô –ö—É–ø–∏—Ç—å 1 –º–µ—Å—è—Ü –∑–∞ 150 –º–æ–Ω–µ—Ç", callback_data="buy_bonus_1m"))
                if user.bonus_coins >= 450:
                    bonus_row.append(InlineKeyboardButton(text="ü™ô –ö—É–ø–∏—Ç—å 3 –º–µ—Å—è—Ü–∞ –∑–∞ 450 –º–æ–Ω–µ—Ç", callback_data="buy_bonus_3m"))
                if bonus_row:
                    keyboard_buttons.append(bonus_row)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await self.bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç: {e}")
    
    async def notify_admin_new_purchase(self, user, subscription, payment_amount: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            from config import ADMIN_IDS
            
            message = f"üõí **–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!**\n\n"
            message += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            message += f"üÜî **Telegram ID:** {user.telegram_id}\n"
            message += f"üìß **Email:** {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            message += f"üì¶ **–¢–∞—Ä–∏—Ñ:** {subscription.plan_name}\n"
            message += f"üí∞ **–°—É–º–º–∞:** {payment_amount}‚ÇΩ\n"
            message += f"üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
            message += f"üîë **–ö–ª—é—á:** SeaMiniVpn-{user.telegram_id}-{subscription.subscription_number}\n\n"
            message += f"‚è∞ **–í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏:** {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"
            
            for admin_id in ADMIN_IDS:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ: {e}")
    
    async def notify_admin_extension(self, user, subscription, payment_amount: int, days_added: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            db = SessionLocal()
            try:
                from database import Admin
                admins = db.query(Admin).filter(Admin.is_active == True).all()
            finally:
                db.close()
            
            message = f"üîÑ **–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏!**\n\n"
            message += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            message += f"üÜî **Telegram ID:** {user.telegram_id}\n"
            message += f"üìß **Email:** {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            message += f"üì¶ **–¢–∞—Ä–∏—Ñ:** {subscription.plan_name}\n"
            message += f"üí∞ **–°—É–º–º–∞:** {payment_amount}‚ÇΩ\n"
            message += f"‚è∞ **–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π:** {days_added}\n"
            message += f"üìÖ **–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
            message += f"üîë **–ö–ª—é—á:** SeaMiniVpn-{user.telegram_id}-{subscription.subscription_number}\n\n"
            message += f"‚è∞ **–í—Ä–µ–º—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:** {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"
            
            for admin in admins:
                try:
                    await self.bot.send_message(
                        chat_id=admin.telegram_id,
                        text=message,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = None

async def run_notification_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_manager
    notification_manager = NotificationManager()
    await notification_manager.start()

def get_admin_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    db = SessionLocal()
    try:
        settings = db.query(AdminSettings).first()
        if not settings:
            settings = AdminSettings()
            db.add(settings)
            db.commit()
        return settings
    finally:
        db.close()

def update_admin_settings(notifications_enabled=None, new_user_notifications=None, subscription_notifications=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    db = SessionLocal()
    try:
        settings = db.query(AdminSettings).first()
        if not settings:
            settings = AdminSettings()
            db.add(settings)
        
        if notifications_enabled is not None:
            settings.notifications_enabled = notifications_enabled
        if new_user_notifications is not None:
            settings.new_user_notifications = new_user_notifications
        if subscription_notifications is not None:
            settings.subscription_notifications = subscription_notifications
        
        db.commit()
        return settings
    finally:
        db.close()

async def send_admin_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        from config import ADMIN_IDS
        
        bot = Bot(token=BOT_TOKEN)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=message,
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        await bot.session.close()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")

def notify_new_message(ticket_id: str, message_id: str, preview: str, author: str):
    """
    –í—ã–∑—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∏–∫–µ—Ç–µ.
    –ï—Å–ª–∏ –±–æ—Ç/–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ ‚Äî —Å—Ç—É—á–∏–º—Å—è HTTP.
    –ï—Å–ª–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –º–æ–∂–µ—à—å –≤–º–µ—Å—Ç–æ HTTP –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å socketio –∏ emit-–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é.
    """
    try:
        requests.post(
            INTERNAL_NOTIFY_URL,
            json={
                "ticket_id": str(ticket_id),
                "message_id": str(message_id),
                "preview": preview or "",
                "author": author or "",
            },
            timeout=3,
        )
    except Exception as e:
        # –ù–µ —Ä–æ–Ω—è–µ–º –ø–æ—Ç–æ–∫ ‚Äî –ª–æ–≥–∏—Ä—É–π –ø–æ –º–µ—Å—Ç—É
        print(f"[notify] failed: {e}")

def notify_new_user(user_id: str, full_name: str, phone: str, email: str):
    """
    –í—ã–∑—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        requests.post(
            INTERNAL_NOTIFY_URL,
            json={
                "type": "new_user",
                "user_id": str(user_id),
                "full_name": full_name or "",
                "phone": phone or "",
                "email": email or "",
            },
            timeout=3,
        )
    except Exception as e:
        # –ù–µ —Ä–æ–Ω—è–µ–º –ø–æ—Ç–æ–∫ ‚Äî –ª–æ–≥–∏—Ä—É–π –ø–æ –º–µ—Å—Ç—É
        print(f"[notify] failed: {e}") 